fn (%input0: Tensor[(1, 3, 224, 224), float32], %features.0.0.weight: Tensor[(32, 3, 3, 3), float32], %features.0.1.weight: Tensor[(32), float32], %features.0.1.bias: Tensor[(32), float32], %features.0.1.running_mean: Tensor[(32), float32], %features.0.1.running_var: Tensor[(32), float32], %features.1.conv.0.0.weight: Tensor[(32, 1, 3, 3), float32], %features.1.conv.0.1.weight: Tensor[(32), float32], %features.1.conv.0.1.bias: Tensor[(32), float32], %features.1.conv.0.1.running_mean: Tensor[(32), float32], %features.1.conv.0.1.running_var: Tensor[(32), float32], %features.1.conv.1.weight: Tensor[(16, 32, 1, 1), float32], %features.1.conv.2.weight: Tensor[(16), float32], %features.1.conv.2.bias: Tensor[(16), float32], %features.1.conv.2.running_mean: Tensor[(16), float32], %features.1.conv.2.running_var: Tensor[(16), float32], %features.2.conv.0.0.weight: Tensor[(96, 16, 1, 1), float32], %features.2.conv.0.1.weight: Tensor[(96), float32], %features.2.conv.0.1.bias: Tensor[(96), float32], %features.2.conv.0.1.running_mean: Tensor[(96), float32], %features.2.conv.0.1.running_var: Tensor[(96), float32], %features.2.conv.1.0.weight: Tensor[(96, 1, 3, 3), float32], %features.2.conv.1.1.weight: Tensor[(96), float32], %features.2.conv.1.1.bias: Tensor[(96), float32], %features.2.conv.1.1.running_mean: Tensor[(96), float32], %features.2.conv.1.1.running_var: Tensor[(96), float32], %features.2.conv.2.weight: Tensor[(24, 96, 1, 1), float32], %features.2.conv.3.weight: Tensor[(24), float32], %features.2.conv.3.bias: Tensor[(24), float32], %features.2.conv.3.running_mean: Tensor[(24), float32], %features.2.conv.3.running_var: Tensor[(24), float32], %features.3.conv.0.0.weight: Tensor[(144, 24, 1, 1), float32], %features.3.conv.0.1.weight: Tensor[(144), float32], %features.3.conv.0.1.bias: Tensor[(144), float32], %features.3.conv.0.1.running_mean: Tensor[(144), float32], %features.3.conv.0.1.running_var: Tensor[(144), float32], %features.3.conv.1.0.weight: Tensor[(144, 1, 3, 3), float32], %features.3.conv.1.1.weight: Tensor[(144), float32], %features.3.conv.1.1.bias: Tensor[(144), float32], %features.3.conv.1.1.running_mean: Tensor[(144), float32], %features.3.conv.1.1.running_var: Tensor[(144), float32], %features.3.conv.2.weight: Tensor[(24, 144, 1, 1), float32], %features.3.conv.3.weight: Tensor[(24), float32], %features.3.conv.3.bias: Tensor[(24), float32], %features.3.conv.3.running_mean: Tensor[(24), float32], %features.3.conv.3.running_var: Tensor[(24), float32], %features.4.conv.0.0.weight: Tensor[(144, 24, 1, 1), float32], %features.4.conv.0.1.weight: Tensor[(144), float32], %features.4.conv.0.1.bias: Tensor[(144), float32], %features.4.conv.0.1.running_mean: Tensor[(144), float32], %features.4.conv.0.1.running_var: Tensor[(144), float32], %features.4.conv.1.0.weight: Tensor[(144, 1, 3, 3), float32], %features.4.conv.1.1.weight: Tensor[(144), float32], %features.4.conv.1.1.bias: Tensor[(144), float32], %features.4.conv.1.1.running_mean: Tensor[(144), float32], %features.4.conv.1.1.running_var: Tensor[(144), float32], %features.4.conv.2.weight: Tensor[(32, 144, 1, 1), float32], %features.4.conv.3.weight: Tensor[(32), float32], %features.4.conv.3.bias: Tensor[(32), float32], %features.4.conv.3.running_mean: Tensor[(32), float32], %features.4.conv.3.running_var: Tensor[(32), float32], %features.5.conv.0.0.weight: Tensor[(192, 32, 1, 1), float32], %features.5.conv.0.1.weight: Tensor[(192), float32], %features.5.conv.0.1.bias: Tensor[(192), float32], %features.5.conv.0.1.running_mean: Tensor[(192), float32], %features.5.conv.0.1.running_var: Tensor[(192), float32], %features.5.conv.1.0.weight: Tensor[(192, 1, 3, 3), float32], %features.5.conv.1.1.weight: Tensor[(192), float32], %features.5.conv.1.1.bias: Tensor[(192), float32], %features.5.conv.1.1.running_mean: Tensor[(192), float32], %features.5.conv.1.1.running_var: Tensor[(192), float32], %features.5.conv.2.weight: Tensor[(32, 192, 1, 1), float32], %features.5.conv.3.weight: Tensor[(32), float32], %features.5.conv.3.bias: Tensor[(32), float32], %features.5.conv.3.running_mean: Tensor[(32), float32], %features.5.conv.3.running_var: Tensor[(32), float32], %features.6.conv.0.0.weight: Tensor[(192, 32, 1, 1), float32], %features.6.conv.0.1.weight: Tensor[(192), float32], %features.6.conv.0.1.bias: Tensor[(192), float32], %features.6.conv.0.1.running_mean: Tensor[(192), float32], %features.6.conv.0.1.running_var: Tensor[(192), float32], %features.6.conv.1.0.weight: Tensor[(192, 1, 3, 3), float32], %features.6.conv.1.1.weight: Tensor[(192), float32], %features.6.conv.1.1.bias: Tensor[(192), float32], %features.6.conv.1.1.running_mean: Tensor[(192), float32], %features.6.conv.1.1.running_var: Tensor[(192), float32], %features.6.conv.2.weight: Tensor[(32, 192, 1, 1), float32], %features.6.conv.3.weight: Tensor[(32), float32], %features.6.conv.3.bias: Tensor[(32), float32], %features.6.conv.3.running_mean: Tensor[(32), float32], %features.6.conv.3.running_var: Tensor[(32), float32], %features.7.conv.0.0.weight: Tensor[(192, 32, 1, 1), float32], %features.7.conv.0.1.weight: Tensor[(192), float32], %features.7.conv.0.1.bias: Tensor[(192), float32], %features.7.conv.0.1.running_mean: Tensor[(192), float32], %features.7.conv.0.1.running_var: Tensor[(192), float32], %features.7.conv.1.0.weight: Tensor[(192, 1, 3, 3), float32], %features.7.conv.1.1.weight: Tensor[(192), float32], %features.7.conv.1.1.bias: Tensor[(192), float32], %features.7.conv.1.1.running_mean: Tensor[(192), float32], %features.7.conv.1.1.running_var: Tensor[(192), float32], %features.7.conv.2.weight: Tensor[(64, 192, 1, 1), float32], %features.7.conv.3.weight: Tensor[(64), float32], %features.7.conv.3.bias: Tensor[(64), float32], %features.7.conv.3.running_mean: Tensor[(64), float32], %features.7.conv.3.running_var: Tensor[(64), float32], %features.8.conv.0.0.weight: Tensor[(384, 64, 1, 1), float32], %features.8.conv.0.1.weight: Tensor[(384), float32], %features.8.conv.0.1.bias: Tensor[(384), float32], %features.8.conv.0.1.running_mean: Tensor[(384), float32], %features.8.conv.0.1.running_var: Tensor[(384), float32], %features.8.conv.1.0.weight: Tensor[(384, 1, 3, 3), float32], %features.8.conv.1.1.weight: Tensor[(384), float32], %features.8.conv.1.1.bias: Tensor[(384), float32], %features.8.conv.1.1.running_mean: Tensor[(384), float32], %features.8.conv.1.1.running_var: Tensor[(384), float32], %features.8.conv.2.weight: Tensor[(64, 384, 1, 1), float32], %features.8.conv.3.weight: Tensor[(64), float32], %features.8.conv.3.bias: Tensor[(64), float32], %features.8.conv.3.running_mean: Tensor[(64), float32], %features.8.conv.3.running_var: Tensor[(64), float32], %features.9.conv.0.0.weight: Tensor[(384, 64, 1, 1), float32], %features.9.conv.0.1.weight: Tensor[(384), float32], %features.9.conv.0.1.bias: Tensor[(384), float32], %features.9.conv.0.1.running_mean: Tensor[(384), float32], %features.9.conv.0.1.running_var: Tensor[(384), float32], %features.9.conv.1.0.weight: Tensor[(384, 1, 3, 3), float32], %features.9.conv.1.1.weight: Tensor[(384), float32], %features.9.conv.1.1.bias: Tensor[(384), float32], %features.9.conv.1.1.running_mean: Tensor[(384), float32], %features.9.conv.1.1.running_var: Tensor[(384), float32], %features.9.conv.2.weight: Tensor[(64, 384, 1, 1), float32], %features.9.conv.3.weight: Tensor[(64), float32], %features.9.conv.3.bias: Tensor[(64), float32], %features.9.conv.3.running_mean: Tensor[(64), float32], %features.9.conv.3.running_var: Tensor[(64), float32], %features.10.conv.0.0.weight: Tensor[(384, 64, 1, 1), float32], %features.10.conv.0.1.weight: Tensor[(384), float32], %features.10.conv.0.1.bias: Tensor[(384), float32], %features.10.conv.0.1.running_mean: Tensor[(384), float32], %features.10.conv.0.1.running_var: Tensor[(384), float32], %features.10.conv.1.0.weight: Tensor[(384, 1, 3, 3), float32], %features.10.conv.1.1.weight: Tensor[(384), float32], %features.10.conv.1.1.bias: Tensor[(384), float32], %features.10.conv.1.1.running_mean: Tensor[(384), float32], %features.10.conv.1.1.running_var: Tensor[(384), float32], %features.10.conv.2.weight: Tensor[(64, 384, 1, 1), float32], %features.10.conv.3.weight: Tensor[(64), float32], %features.10.conv.3.bias: Tensor[(64), float32], %features.10.conv.3.running_mean: Tensor[(64), float32], %features.10.conv.3.running_var: Tensor[(64), float32], %features.11.conv.0.0.weight: Tensor[(384, 64, 1, 1), float32], %features.11.conv.0.1.weight: Tensor[(384), float32], %features.11.conv.0.1.bias: Tensor[(384), float32], %features.11.conv.0.1.running_mean: Tensor[(384), float32], %features.11.conv.0.1.running_var: Tensor[(384), float32], %features.11.conv.1.0.weight: Tensor[(384, 1, 3, 3), float32], %features.11.conv.1.1.weight: Tensor[(384), float32], %features.11.conv.1.1.bias: Tensor[(384), float32], %features.11.conv.1.1.running_mean: Tensor[(384), float32], %features.11.conv.1.1.running_var: Tensor[(384), float32], %features.11.conv.2.weight: Tensor[(96, 384, 1, 1), float32], %features.11.conv.3.weight: Tensor[(96), float32], %features.11.conv.3.bias: Tensor[(96), float32], %features.11.conv.3.running_mean: Tensor[(96), float32], %features.11.conv.3.running_var: Tensor[(96), float32], %features.12.conv.0.0.weight: Tensor[(576, 96, 1, 1), float32], %features.12.conv.0.1.weight: Tensor[(576), float32], %features.12.conv.0.1.bias: Tensor[(576), float32], %features.12.conv.0.1.running_mean: Tensor[(576), float32], %features.12.conv.0.1.running_var: Tensor[(576), float32], %features.12.conv.1.0.weight: Tensor[(576, 1, 3, 3), float32], %features.12.conv.1.1.weight: Tensor[(576), float32], %features.12.conv.1.1.bias: Tensor[(576), float32], %features.12.conv.1.1.running_mean: Tensor[(576), float32], %features.12.conv.1.1.running_var: Tensor[(576), float32], %features.12.conv.2.weight: Tensor[(96, 576, 1, 1), float32], %features.12.conv.3.weight: Tensor[(96), float32], %features.12.conv.3.bias: Tensor[(96), float32], %features.12.conv.3.running_mean: Tensor[(96), float32], %features.12.conv.3.running_var: Tensor[(96), float32], %features.13.conv.0.0.weight: Tensor[(576, 96, 1, 1), float32], %features.13.conv.0.1.weight: Tensor[(576), float32], %features.13.conv.0.1.bias: Tensor[(576), float32], %features.13.conv.0.1.running_mean: Tensor[(576), float32], %features.13.conv.0.1.running_var: Tensor[(576), float32], %features.13.conv.1.0.weight: Tensor[(576, 1, 3, 3), float32], %features.13.conv.1.1.weight: Tensor[(576), float32], %features.13.conv.1.1.bias: Tensor[(576), float32], %features.13.conv.1.1.running_mean: Tensor[(576), float32], %features.13.conv.1.1.running_var: Tensor[(576), float32], %features.13.conv.2.weight: Tensor[(96, 576, 1, 1), float32], %features.13.conv.3.weight: Tensor[(96), float32], %features.13.conv.3.bias: Tensor[(96), float32], %features.13.conv.3.running_mean: Tensor[(96), float32], %features.13.conv.3.running_var: Tensor[(96), float32], %features.14.conv.0.0.weight: Tensor[(576, 96, 1, 1), float32], %features.14.conv.0.1.weight: Tensor[(576), float32], %features.14.conv.0.1.bias: Tensor[(576), float32], %features.14.conv.0.1.running_mean: Tensor[(576), float32], %features.14.conv.0.1.running_var: Tensor[(576), float32], %features.14.conv.1.0.weight: Tensor[(576, 1, 3, 3), float32], %features.14.conv.1.1.weight: Tensor[(576), float32], %features.14.conv.1.1.bias: Tensor[(576), float32], %features.14.conv.1.1.running_mean: Tensor[(576), float32], %features.14.conv.1.1.running_var: Tensor[(576), float32], %features.14.conv.2.weight: Tensor[(160, 576, 1, 1), float32], %features.14.conv.3.weight: Tensor[(160), float32], %features.14.conv.3.bias: Tensor[(160), float32], %features.14.conv.3.running_mean: Tensor[(160), float32], %features.14.conv.3.running_var: Tensor[(160), float32], %features.15.conv.0.0.weight: Tensor[(960, 160, 1, 1), float32], %features.15.conv.0.1.weight: Tensor[(960), float32], %features.15.conv.0.1.bias: Tensor[(960), float32], %features.15.conv.0.1.running_mean: Tensor[(960), float32], %features.15.conv.0.1.running_var: Tensor[(960), float32], %features.15.conv.1.0.weight: Tensor[(960, 1, 3, 3), float32], %features.15.conv.1.1.weight: Tensor[(960), float32], %features.15.conv.1.1.bias: Tensor[(960), float32], %features.15.conv.1.1.running_mean: Tensor[(960), float32], %features.15.conv.1.1.running_var: Tensor[(960), float32], %features.15.conv.2.weight: Tensor[(160, 960, 1, 1), float32], %features.15.conv.3.weight: Tensor[(160), float32], %features.15.conv.3.bias: Tensor[(160), float32], %features.15.conv.3.running_mean: Tensor[(160), float32], %features.15.conv.3.running_var: Tensor[(160), float32], %features.16.conv.0.0.weight: Tensor[(960, 160, 1, 1), float32], %features.16.conv.0.1.weight: Tensor[(960), float32], %features.16.conv.0.1.bias: Tensor[(960), float32], %features.16.conv.0.1.running_mean: Tensor[(960), float32], %features.16.conv.0.1.running_var: Tensor[(960), float32], %features.16.conv.1.0.weight: Tensor[(960, 1, 3, 3), float32], %features.16.conv.1.1.weight: Tensor[(960), float32], %features.16.conv.1.1.bias: Tensor[(960), float32], %features.16.conv.1.1.running_mean: Tensor[(960), float32], %features.16.conv.1.1.running_var: Tensor[(960), float32], %features.16.conv.2.weight: Tensor[(160, 960, 1, 1), float32], %features.16.conv.3.weight: Tensor[(160), float32], %features.16.conv.3.bias: Tensor[(160), float32], %features.16.conv.3.running_mean: Tensor[(160), float32], %features.16.conv.3.running_var: Tensor[(160), float32], %features.17.conv.0.0.weight: Tensor[(960, 160, 1, 1), float32], %features.17.conv.0.1.weight: Tensor[(960), float32], %features.17.conv.0.1.bias: Tensor[(960), float32], %features.17.conv.0.1.running_mean: Tensor[(960), float32], %features.17.conv.0.1.running_var: Tensor[(960), float32], %features.17.conv.1.0.weight: Tensor[(960, 1, 3, 3), float32], %features.17.conv.1.1.weight: Tensor[(960), float32], %features.17.conv.1.1.bias: Tensor[(960), float32], %features.17.conv.1.1.running_mean: Tensor[(960), float32], %features.17.conv.1.1.running_var: Tensor[(960), float32], %features.17.conv.2.weight: Tensor[(320, 960, 1, 1), float32], %features.17.conv.3.weight: Tensor[(320), float32], %features.17.conv.3.bias: Tensor[(320), float32], %features.17.conv.3.running_mean: Tensor[(320), float32], %features.17.conv.3.running_var: Tensor[(320), float32], %features.18.0.weight: Tensor[(1280, 320, 1, 1), float32], %features.18.1.weight: Tensor[(1280), float32], %features.18.1.bias: Tensor[(1280), float32], %features.18.1.running_mean: Tensor[(1280), float32], %features.18.1.running_var: Tensor[(1280), float32], %classifier.1.weight: Tensor[(1000, 1280), float32], %classifier.1.bias: Tensor[(1000), float32]) {
  %0 = nn.conv2d(%input0, %features.0.0.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]);
  %1 = nn.batch_norm(%0, %features.0.1.weight, %features.0.1.bias, %features.0.1.running_mean, %features.0.1.running_var);
  %2 = %1.0;
  %3 = clip(%2, a_min=0f, a_max=6f);
  %4 = reshape(%features.1.conv.0.0.weight, newshape=[32, 1, 3, 3]);
  %5 = nn.conv2d(%3, %4, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]);
  %6 = nn.batch_norm(%5, %features.1.conv.0.1.weight, %features.1.conv.0.1.bias, %features.1.conv.0.1.running_mean, %features.1.conv.0.1.running_var);
  %7 = %6.0;
  %8 = clip(%7, a_min=0f, a_max=6f);
  %9 = nn.conv2d(%8, %features.1.conv.1.weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]);
  %10 = nn.batch_norm(%9, %features.1.conv.2.weight, %features.1.conv.2.bias, %features.1.conv.2.running_mean, %features.1.conv.2.running_var);
  %11 = %10.0;
  %12 = nn.conv2d(%11, %features.2.conv.0.0.weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]);
  %13 = nn.batch_norm(%12, %features.2.conv.0.1.weight, %features.2.conv.0.1.bias, %features.2.conv.0.1.running_mean, %features.2.conv.0.1.running_var);
  %14 = %13.0;
  %15 = clip(%14, a_min=0f, a_max=6f);
  %16 = reshape(%features.2.conv.1.0.weight, newshape=[96, 1, 3, 3]);
  %17 = nn.conv2d(%15, %16, strides=[2, 2], padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]);
  %18 = nn.batch_norm(%17, %features.2.conv.1.1.weight, %features.2.conv.1.1.bias, %features.2.conv.1.1.running_mean, %features.2.conv.1.1.running_var);
  %19 = %18.0;
  %20 = clip(%19, a_min=0f, a_max=6f);
  %21 = nn.conv2d(%20, %features.2.conv.2.weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]);
  %22 = nn.batch_norm(%21, %features.2.conv.3.weight, %features.2.conv.3.bias, %features.2.conv.3.running_mean, %features.2.conv.3.running_var);
  %23 = %22.0;
  %24 = nn.conv2d(%23, %features.3.conv.0.0.weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]);
  %25 = nn.batch_norm(%24, %features.3.conv.0.1.weight, %features.3.conv.0.1.bias, %features.3.conv.0.1.running_mean, %features.3.conv.0.1.running_var);
  %26 = %25.0;
  %27 = clip(%26, a_min=0f, a_max=6f);
  %28 = reshape(%features.3.conv.1.0.weight, newshape=[144, 1, 3, 3]);
  %29 = nn.conv2d(%27, %28, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]);
  %30 = nn.batch_norm(%29, %features.3.conv.1.1.weight, %features.3.conv.1.1.bias, %features.3.conv.1.1.running_mean, %features.3.conv.1.1.running_var);
  %31 = %30.0;
  %32 = clip(%31, a_min=0f, a_max=6f);
  %33 = nn.conv2d(%32, %features.3.conv.2.weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]);
  %34 = nn.batch_norm(%33, %features.3.conv.3.weight, %features.3.conv.3.bias, %features.3.conv.3.running_mean, %features.3.conv.3.running_var);
  %35 = %34.0;
  %36 = add(%23, %35);
  %37 = nn.conv2d(%36, %features.4.conv.0.0.weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]);
  %38 = nn.batch_norm(%37, %features.4.conv.0.1.weight, %features.4.conv.0.1.bias, %features.4.conv.0.1.running_mean, %features.4.conv.0.1.running_var);
  %39 = %38.0;
  %40 = clip(%39, a_min=0f, a_max=6f);
  %41 = reshape(%features.4.conv.1.0.weight, newshape=[144, 1, 3, 3]);
  %42 = nn.conv2d(%40, %41, strides=[2, 2], padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]);
  %43 = nn.batch_norm(%42, %features.4.conv.1.1.weight, %features.4.conv.1.1.bias, %features.4.conv.1.1.running_mean, %features.4.conv.1.1.running_var);
  %44 = %43.0;
  %45 = clip(%44, a_min=0f, a_max=6f);
  %46 = nn.conv2d(%45, %features.4.conv.2.weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]);
  %47 = nn.batch_norm(%46, %features.4.conv.3.weight, %features.4.conv.3.bias, %features.4.conv.3.running_mean, %features.4.conv.3.running_var);
  %48 = %47.0;
  %49 = nn.conv2d(%48, %features.5.conv.0.0.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]);
  %50 = nn.batch_norm(%49, %features.5.conv.0.1.weight, %features.5.conv.0.1.bias, %features.5.conv.0.1.running_mean, %features.5.conv.0.1.running_var);
  %51 = %50.0;
  %52 = clip(%51, a_min=0f, a_max=6f);
  %53 = reshape(%features.5.conv.1.0.weight, newshape=[192, 1, 3, 3]);
  %54 = nn.conv2d(%52, %53, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]);
  %55 = nn.batch_norm(%54, %features.5.conv.1.1.weight, %features.5.conv.1.1.bias, %features.5.conv.1.1.running_mean, %features.5.conv.1.1.running_var);
  %56 = %55.0;
  %57 = clip(%56, a_min=0f, a_max=6f);
  %58 = nn.conv2d(%57, %features.5.conv.2.weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]);
  %59 = nn.batch_norm(%58, %features.5.conv.3.weight, %features.5.conv.3.bias, %features.5.conv.3.running_mean, %features.5.conv.3.running_var);
  %60 = %59.0;
  %61 = add(%48, %60);
  %62 = nn.conv2d(%61, %features.6.conv.0.0.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]);
  %63 = nn.batch_norm(%62, %features.6.conv.0.1.weight, %features.6.conv.0.1.bias, %features.6.conv.0.1.running_mean, %features.6.conv.0.1.running_var);
  %64 = %63.0;
  %65 = clip(%64, a_min=0f, a_max=6f);
  %66 = reshape(%features.6.conv.1.0.weight, newshape=[192, 1, 3, 3]);
  %67 = nn.conv2d(%65, %66, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]);
  %68 = nn.batch_norm(%67, %features.6.conv.1.1.weight, %features.6.conv.1.1.bias, %features.6.conv.1.1.running_mean, %features.6.conv.1.1.running_var);
  %69 = %68.0;
  %70 = clip(%69, a_min=0f, a_max=6f);
  %71 = nn.conv2d(%70, %features.6.conv.2.weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]);
  %72 = nn.batch_norm(%71, %features.6.conv.3.weight, %features.6.conv.3.bias, %features.6.conv.3.running_mean, %features.6.conv.3.running_var);
  %73 = %72.0;
  %74 = add(%61, %73);
  %75 = nn.conv2d(%74, %features.7.conv.0.0.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]);
  %76 = nn.batch_norm(%75, %features.7.conv.0.1.weight, %features.7.conv.0.1.bias, %features.7.conv.0.1.running_mean, %features.7.conv.0.1.running_var);
  %77 = %76.0;
  %78 = clip(%77, a_min=0f, a_max=6f);
  %79 = reshape(%features.7.conv.1.0.weight, newshape=[192, 1, 3, 3]);
  %80 = nn.conv2d(%78, %79, strides=[2, 2], padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]);
  %81 = nn.batch_norm(%80, %features.7.conv.1.1.weight, %features.7.conv.1.1.bias, %features.7.conv.1.1.running_mean, %features.7.conv.1.1.running_var);
  %82 = %81.0;
  %83 = clip(%82, a_min=0f, a_max=6f);
  %84 = nn.conv2d(%83, %features.7.conv.2.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %85 = nn.batch_norm(%84, %features.7.conv.3.weight, %features.7.conv.3.bias, %features.7.conv.3.running_mean, %features.7.conv.3.running_var);
  %86 = %85.0;
  %87 = nn.conv2d(%86, %features.8.conv.0.0.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]);
  %88 = nn.batch_norm(%87, %features.8.conv.0.1.weight, %features.8.conv.0.1.bias, %features.8.conv.0.1.running_mean, %features.8.conv.0.1.running_var);
  %89 = %88.0;
  %90 = clip(%89, a_min=0f, a_max=6f);
  %91 = reshape(%features.8.conv.1.0.weight, newshape=[384, 1, 3, 3]);
  %92 = nn.conv2d(%90, %91, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]);
  %93 = nn.batch_norm(%92, %features.8.conv.1.1.weight, %features.8.conv.1.1.bias, %features.8.conv.1.1.running_mean, %features.8.conv.1.1.running_var);
  %94 = %93.0;
  %95 = clip(%94, a_min=0f, a_max=6f);
  %96 = nn.conv2d(%95, %features.8.conv.2.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %97 = nn.batch_norm(%96, %features.8.conv.3.weight, %features.8.conv.3.bias, %features.8.conv.3.running_mean, %features.8.conv.3.running_var);
  %98 = %97.0;
  %99 = add(%86, %98);
  %100 = nn.conv2d(%99, %features.9.conv.0.0.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]);
  %101 = nn.batch_norm(%100, %features.9.conv.0.1.weight, %features.9.conv.0.1.bias, %features.9.conv.0.1.running_mean, %features.9.conv.0.1.running_var);
  %102 = %101.0;
  %103 = clip(%102, a_min=0f, a_max=6f);
  %104 = reshape(%features.9.conv.1.0.weight, newshape=[384, 1, 3, 3]);
  %105 = nn.conv2d(%103, %104, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]);
  %106 = nn.batch_norm(%105, %features.9.conv.1.1.weight, %features.9.conv.1.1.bias, %features.9.conv.1.1.running_mean, %features.9.conv.1.1.running_var);
  %107 = %106.0;
  %108 = clip(%107, a_min=0f, a_max=6f);
  %109 = nn.conv2d(%108, %features.9.conv.2.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %110 = nn.batch_norm(%109, %features.9.conv.3.weight, %features.9.conv.3.bias, %features.9.conv.3.running_mean, %features.9.conv.3.running_var);
  %111 = %110.0;
  %112 = add(%99, %111);
  %113 = nn.conv2d(%112, %features.10.conv.0.0.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]);
  %114 = nn.batch_norm(%113, %features.10.conv.0.1.weight, %features.10.conv.0.1.bias, %features.10.conv.0.1.running_mean, %features.10.conv.0.1.running_var);
  %115 = %114.0;
  %116 = clip(%115, a_min=0f, a_max=6f);
  %117 = reshape(%features.10.conv.1.0.weight, newshape=[384, 1, 3, 3]);
  %118 = nn.conv2d(%116, %117, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]);
  %119 = nn.batch_norm(%118, %features.10.conv.1.1.weight, %features.10.conv.1.1.bias, %features.10.conv.1.1.running_mean, %features.10.conv.1.1.running_var);
  %120 = %119.0;
  %121 = clip(%120, a_min=0f, a_max=6f);
  %122 = nn.conv2d(%121, %features.10.conv.2.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %123 = nn.batch_norm(%122, %features.10.conv.3.weight, %features.10.conv.3.bias, %features.10.conv.3.running_mean, %features.10.conv.3.running_var);
  %124 = %123.0;
  %125 = add(%112, %124);
  %126 = nn.conv2d(%125, %features.11.conv.0.0.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]);
  %127 = nn.batch_norm(%126, %features.11.conv.0.1.weight, %features.11.conv.0.1.bias, %features.11.conv.0.1.running_mean, %features.11.conv.0.1.running_var);
  %128 = %127.0;
  %129 = clip(%128, a_min=0f, a_max=6f);
  %130 = reshape(%features.11.conv.1.0.weight, newshape=[384, 1, 3, 3]);
  %131 = nn.conv2d(%129, %130, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]);
  %132 = nn.batch_norm(%131, %features.11.conv.1.1.weight, %features.11.conv.1.1.bias, %features.11.conv.1.1.running_mean, %features.11.conv.1.1.running_var);
  %133 = %132.0;
  %134 = clip(%133, a_min=0f, a_max=6f);
  %135 = nn.conv2d(%134, %features.11.conv.2.weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]);
  %136 = nn.batch_norm(%135, %features.11.conv.3.weight, %features.11.conv.3.bias, %features.11.conv.3.running_mean, %features.11.conv.3.running_var);
  %137 = %136.0;
  %138 = nn.conv2d(%137, %features.12.conv.0.0.weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]);
  %139 = nn.batch_norm(%138, %features.12.conv.0.1.weight, %features.12.conv.0.1.bias, %features.12.conv.0.1.running_mean, %features.12.conv.0.1.running_var);
  %140 = %139.0;
  %141 = clip(%140, a_min=0f, a_max=6f);
  %142 = reshape(%features.12.conv.1.0.weight, newshape=[576, 1, 3, 3]);
  %143 = nn.conv2d(%141, %142, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]);
  %144 = nn.batch_norm(%143, %features.12.conv.1.1.weight, %features.12.conv.1.1.bias, %features.12.conv.1.1.running_mean, %features.12.conv.1.1.running_var);
  %145 = %144.0;
  %146 = clip(%145, a_min=0f, a_max=6f);
  %147 = nn.conv2d(%146, %features.12.conv.2.weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]);
  %148 = nn.batch_norm(%147, %features.12.conv.3.weight, %features.12.conv.3.bias, %features.12.conv.3.running_mean, %features.12.conv.3.running_var);
  %149 = %148.0;
  %150 = add(%137, %149);
  %151 = nn.conv2d(%150, %features.13.conv.0.0.weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]);
  %152 = nn.batch_norm(%151, %features.13.conv.0.1.weight, %features.13.conv.0.1.bias, %features.13.conv.0.1.running_mean, %features.13.conv.0.1.running_var);
  %153 = %152.0;
  %154 = clip(%153, a_min=0f, a_max=6f);
  %155 = reshape(%features.13.conv.1.0.weight, newshape=[576, 1, 3, 3]);
  %156 = nn.conv2d(%154, %155, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]);
  %157 = nn.batch_norm(%156, %features.13.conv.1.1.weight, %features.13.conv.1.1.bias, %features.13.conv.1.1.running_mean, %features.13.conv.1.1.running_var);
  %158 = %157.0;
  %159 = clip(%158, a_min=0f, a_max=6f);
  %160 = nn.conv2d(%159, %features.13.conv.2.weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]);
  %161 = nn.batch_norm(%160, %features.13.conv.3.weight, %features.13.conv.3.bias, %features.13.conv.3.running_mean, %features.13.conv.3.running_var);
  %162 = %161.0;
  %163 = add(%150, %162);
  %164 = nn.conv2d(%163, %features.14.conv.0.0.weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]);
  %165 = nn.batch_norm(%164, %features.14.conv.0.1.weight, %features.14.conv.0.1.bias, %features.14.conv.0.1.running_mean, %features.14.conv.0.1.running_var);
  %166 = %165.0;
  %167 = clip(%166, a_min=0f, a_max=6f);
  %168 = reshape(%features.14.conv.1.0.weight, newshape=[576, 1, 3, 3]);
  %169 = nn.conv2d(%167, %168, strides=[2, 2], padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]);
  %170 = nn.batch_norm(%169, %features.14.conv.1.1.weight, %features.14.conv.1.1.bias, %features.14.conv.1.1.running_mean, %features.14.conv.1.1.running_var);
  %171 = %170.0;
  %172 = clip(%171, a_min=0f, a_max=6f);
  %173 = nn.conv2d(%172, %features.14.conv.2.weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]);
  %174 = nn.batch_norm(%173, %features.14.conv.3.weight, %features.14.conv.3.bias, %features.14.conv.3.running_mean, %features.14.conv.3.running_var);
  %175 = %174.0;
  %176 = nn.conv2d(%175, %features.15.conv.0.0.weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]);
  %177 = nn.batch_norm(%176, %features.15.conv.0.1.weight, %features.15.conv.0.1.bias, %features.15.conv.0.1.running_mean, %features.15.conv.0.1.running_var);
  %178 = %177.0;
  %179 = clip(%178, a_min=0f, a_max=6f);
  %180 = reshape(%features.15.conv.1.0.weight, newshape=[960, 1, 3, 3]);
  %181 = nn.conv2d(%179, %180, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]);
  %182 = nn.batch_norm(%181, %features.15.conv.1.1.weight, %features.15.conv.1.1.bias, %features.15.conv.1.1.running_mean, %features.15.conv.1.1.running_var);
  %183 = %182.0;
  %184 = clip(%183, a_min=0f, a_max=6f);
  %185 = nn.conv2d(%184, %features.15.conv.2.weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]);
  %186 = nn.batch_norm(%185, %features.15.conv.3.weight, %features.15.conv.3.bias, %features.15.conv.3.running_mean, %features.15.conv.3.running_var);
  %187 = %186.0;
  %188 = add(%175, %187);
  %189 = nn.conv2d(%188, %features.16.conv.0.0.weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]);
  %190 = nn.batch_norm(%189, %features.16.conv.0.1.weight, %features.16.conv.0.1.bias, %features.16.conv.0.1.running_mean, %features.16.conv.0.1.running_var);
  %191 = %190.0;
  %192 = clip(%191, a_min=0f, a_max=6f);
  %193 = reshape(%features.16.conv.1.0.weight, newshape=[960, 1, 3, 3]);
  %194 = nn.conv2d(%192, %193, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]);
  %195 = nn.batch_norm(%194, %features.16.conv.1.1.weight, %features.16.conv.1.1.bias, %features.16.conv.1.1.running_mean, %features.16.conv.1.1.running_var);
  %196 = %195.0;
  %197 = clip(%196, a_min=0f, a_max=6f);
  %198 = nn.conv2d(%197, %features.16.conv.2.weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]);
  %199 = nn.batch_norm(%198, %features.16.conv.3.weight, %features.16.conv.3.bias, %features.16.conv.3.running_mean, %features.16.conv.3.running_var);
  %200 = %199.0;
  %201 = add(%188, %200);
  %202 = nn.conv2d(%201, %features.17.conv.0.0.weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]);
  %203 = nn.batch_norm(%202, %features.17.conv.0.1.weight, %features.17.conv.0.1.bias, %features.17.conv.0.1.running_mean, %features.17.conv.0.1.running_var);
  %204 = %203.0;
  %205 = clip(%204, a_min=0f, a_max=6f);
  %206 = reshape(%features.17.conv.1.0.weight, newshape=[960, 1, 3, 3]);
  %207 = nn.conv2d(%205, %206, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]);
  %208 = nn.batch_norm(%207, %features.17.conv.1.1.weight, %features.17.conv.1.1.bias, %features.17.conv.1.1.running_mean, %features.17.conv.1.1.running_var);
  %209 = %208.0;
  %210 = clip(%209, a_min=0f, a_max=6f);
  %211 = nn.conv2d(%210, %features.17.conv.2.weight, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]);
  %212 = nn.batch_norm(%211, %features.17.conv.3.weight, %features.17.conv.3.bias, %features.17.conv.3.running_mean, %features.17.conv.3.running_var);
  %213 = %212.0;
  %214 = nn.conv2d(%213, %features.18.0.weight, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]);
  %215 = nn.batch_norm(%214, %features.18.1.weight, %features.18.1.bias, %features.18.1.running_mean, %features.18.1.running_var);
  %216 = %215.0;
  %217 = clip(%216, a_min=0f, a_max=6f);
  %218 = nn.adaptive_avg_pool2d(%217, output_size=[1, 1]);
  %219 = reshape(%218, newshape=[1, -1]);
  %220 = nn.dropout(%219, rate=0.2f);
  %221 = transpose(%classifier.1.weight, axes=[1, 0]);
  %222 = %220.0;
  %223 = transpose(%221, axes=[1, 0]);
  %224 = nn.dense(%222, %223, units=1000);
  add(%224, %classifier.1.bias)
}