fn (%input0: Tensor[(1, 3, 224, 224), float32] /* ty=Tensor[(1, 3, 224, 224), float32] */, %conv1.weight: Tensor[(64, 3, 7, 7), float32] /* ty=Tensor[(64, 3, 7, 7), float32] */, %bn1.weight: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %bn1.bias: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %bn1.running_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %bn1.running_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.conv1.weight: Tensor[(64, 64, 1, 1), float32] /* ty=Tensor[(64, 64, 1, 1), float32] */, %layer1.0.bn1.weight: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.bn1.bias: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.bn1.running_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.bn1.running_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.conv2.weight: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, %layer1.0.bn2.weight: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.bn2.bias: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.bn2.running_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.bn2.running_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.conv3.weight: Tensor[(256, 64, 1, 1), float32] /* ty=Tensor[(256, 64, 1, 1), float32] */, %layer1.0.bn3.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer1.0.bn3.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer1.0.bn3.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer1.0.bn3.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer1.0.downsample.0.weight: Tensor[(256, 64, 1, 1), float32] /* ty=Tensor[(256, 64, 1, 1), float32] */, %layer1.0.downsample.1.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer1.0.downsample.1.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer1.0.downsample.1.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer1.0.downsample.1.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer1.1.conv1.weight: Tensor[(64, 256, 1, 1), float32] /* ty=Tensor[(64, 256, 1, 1), float32] */, %layer1.1.bn1.weight: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.bn1.bias: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.bn1.running_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.bn1.running_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.conv2.weight: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, %layer1.1.bn2.weight: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.bn2.bias: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.bn2.running_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.bn2.running_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.conv3.weight: Tensor[(256, 64, 1, 1), float32] /* ty=Tensor[(256, 64, 1, 1), float32] */, %layer1.1.bn3.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer1.1.bn3.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer1.1.bn3.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer1.1.bn3.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer1.2.conv1.weight: Tensor[(64, 256, 1, 1), float32] /* ty=Tensor[(64, 256, 1, 1), float32] */, %layer1.2.bn1.weight: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.2.bn1.bias: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.2.bn1.running_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.2.bn1.running_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.2.conv2.weight: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, %layer1.2.bn2.weight: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.2.bn2.bias: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.2.bn2.running_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.2.bn2.running_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.2.conv3.weight: Tensor[(256, 64, 1, 1), float32] /* ty=Tensor[(256, 64, 1, 1), float32] */, %layer1.2.bn3.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer1.2.bn3.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer1.2.bn3.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer1.2.bn3.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer2.0.conv1.weight: Tensor[(128, 256, 1, 1), float32] /* ty=Tensor[(128, 256, 1, 1), float32] */, %layer2.0.bn1.weight: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.bn1.bias: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.bn1.running_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.bn1.running_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.conv2.weight: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, %layer2.0.bn2.weight: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.bn2.bias: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.bn2.running_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.bn2.running_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.conv3.weight: Tensor[(512, 128, 1, 1), float32] /* ty=Tensor[(512, 128, 1, 1), float32] */, %layer2.0.bn3.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.0.bn3.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.0.bn3.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.0.bn3.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.0.downsample.0.weight: Tensor[(512, 256, 1, 1), float32] /* ty=Tensor[(512, 256, 1, 1), float32] */, %layer2.0.downsample.1.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.0.downsample.1.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.0.downsample.1.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.0.downsample.1.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.1.conv1.weight: Tensor[(128, 512, 1, 1), float32] /* ty=Tensor[(128, 512, 1, 1), float32] */, %layer2.1.bn1.weight: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.bn1.bias: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.bn1.running_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.bn1.running_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.conv2.weight: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, %layer2.1.bn2.weight: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.bn2.bias: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.bn2.running_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.bn2.running_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.conv3.weight: Tensor[(512, 128, 1, 1), float32] /* ty=Tensor[(512, 128, 1, 1), float32] */, %layer2.1.bn3.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.1.bn3.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.1.bn3.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.1.bn3.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.2.conv1.weight: Tensor[(128, 512, 1, 1), float32] /* ty=Tensor[(128, 512, 1, 1), float32] */, %layer2.2.bn1.weight: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.2.bn1.bias: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.2.bn1.running_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.2.bn1.running_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.2.conv2.weight: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, %layer2.2.bn2.weight: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.2.bn2.bias: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.2.bn2.running_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.2.bn2.running_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.2.conv3.weight: Tensor[(512, 128, 1, 1), float32] /* ty=Tensor[(512, 128, 1, 1), float32] */, %layer2.2.bn3.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.2.bn3.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.2.bn3.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.2.bn3.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.3.conv1.weight: Tensor[(128, 512, 1, 1), float32] /* ty=Tensor[(128, 512, 1, 1), float32] */, %layer2.3.bn1.weight: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.3.bn1.bias: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.3.bn1.running_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.3.bn1.running_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.3.conv2.weight: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, %layer2.3.bn2.weight: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.3.bn2.bias: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.3.bn2.running_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.3.bn2.running_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.3.conv3.weight: Tensor[(512, 128, 1, 1), float32] /* ty=Tensor[(512, 128, 1, 1), float32] */, %layer2.3.bn3.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.3.bn3.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.3.bn3.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer2.3.bn3.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer3.0.conv1.weight: Tensor[(256, 512, 1, 1), float32] /* ty=Tensor[(256, 512, 1, 1), float32] */, %layer3.0.bn1.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.bn1.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.bn1.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.bn1.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.conv2.weight: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, %layer3.0.bn2.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.bn2.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.bn2.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.bn2.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.conv3.weight: Tensor[(1024, 256, 1, 1), float32] /* ty=Tensor[(1024, 256, 1, 1), float32] */, %layer3.0.bn3.weight: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.0.bn3.bias: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.0.bn3.running_mean: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.0.bn3.running_var: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.0.downsample.0.weight: Tensor[(1024, 512, 1, 1), float32] /* ty=Tensor[(1024, 512, 1, 1), float32] */, %layer3.0.downsample.1.weight: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.0.downsample.1.bias: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.0.downsample.1.running_mean: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.0.downsample.1.running_var: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.1.conv1.weight: Tensor[(256, 1024, 1, 1), float32] /* ty=Tensor[(256, 1024, 1, 1), float32] */, %layer3.1.bn1.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.bn1.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.bn1.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.bn1.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.conv2.weight: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, %layer3.1.bn2.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.bn2.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.bn2.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.bn2.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.conv3.weight: Tensor[(1024, 256, 1, 1), float32] /* ty=Tensor[(1024, 256, 1, 1), float32] */, %layer3.1.bn3.weight: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.1.bn3.bias: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.1.bn3.running_mean: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.1.bn3.running_var: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.2.conv1.weight: Tensor[(256, 1024, 1, 1), float32] /* ty=Tensor[(256, 1024, 1, 1), float32] */, %layer3.2.bn1.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.2.bn1.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.2.bn1.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.2.bn1.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.2.conv2.weight: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, %layer3.2.bn2.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.2.bn2.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.2.bn2.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.2.bn2.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.2.conv3.weight: Tensor[(1024, 256, 1, 1), float32] /* ty=Tensor[(1024, 256, 1, 1), float32] */, %layer3.2.bn3.weight: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.2.bn3.bias: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.2.bn3.running_mean: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.2.bn3.running_var: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.3.conv1.weight: Tensor[(256, 1024, 1, 1), float32] /* ty=Tensor[(256, 1024, 1, 1), float32] */, %layer3.3.bn1.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.3.bn1.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.3.bn1.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.3.bn1.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.3.conv2.weight: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, %layer3.3.bn2.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.3.bn2.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.3.bn2.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.3.bn2.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.3.conv3.weight: Tensor[(1024, 256, 1, 1), float32] /* ty=Tensor[(1024, 256, 1, 1), float32] */, %layer3.3.bn3.weight: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.3.bn3.bias: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.3.bn3.running_mean: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.3.bn3.running_var: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.4.conv1.weight: Tensor[(256, 1024, 1, 1), float32] /* ty=Tensor[(256, 1024, 1, 1), float32] */, %layer3.4.bn1.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.4.bn1.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.4.bn1.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.4.bn1.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.4.conv2.weight: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, %layer3.4.bn2.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.4.bn2.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.4.bn2.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.4.bn2.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.4.conv3.weight: Tensor[(1024, 256, 1, 1), float32] /* ty=Tensor[(1024, 256, 1, 1), float32] */, %layer3.4.bn3.weight: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.4.bn3.bias: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.4.bn3.running_mean: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.4.bn3.running_var: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.5.conv1.weight: Tensor[(256, 1024, 1, 1), float32] /* ty=Tensor[(256, 1024, 1, 1), float32] */, %layer3.5.bn1.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.5.bn1.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.5.bn1.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.5.bn1.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.5.conv2.weight: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, %layer3.5.bn2.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.5.bn2.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.5.bn2.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.5.bn2.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.5.conv3.weight: Tensor[(1024, 256, 1, 1), float32] /* ty=Tensor[(1024, 256, 1, 1), float32] */, %layer3.5.bn3.weight: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.5.bn3.bias: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.5.bn3.running_mean: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer3.5.bn3.running_var: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %layer4.0.conv1.weight: Tensor[(512, 1024, 1, 1), float32] /* ty=Tensor[(512, 1024, 1, 1), float32] */, %layer4.0.bn1.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.bn1.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.bn1.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.bn1.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.conv2.weight: Tensor[(512, 512, 3, 3), float32] /* ty=Tensor[(512, 512, 3, 3), float32] */, %layer4.0.bn2.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.bn2.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.bn2.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.bn2.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.conv3.weight: Tensor[(2048, 512, 1, 1), float32] /* ty=Tensor[(2048, 512, 1, 1), float32] */, %layer4.0.bn3.weight: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %layer4.0.bn3.bias: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %layer4.0.bn3.running_mean: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %layer4.0.bn3.running_var: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %layer4.0.downsample.0.weight: Tensor[(2048, 1024, 1, 1), float32] /* ty=Tensor[(2048, 1024, 1, 1), float32] */, %layer4.0.downsample.1.weight: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %layer4.0.downsample.1.bias: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %layer4.0.downsample.1.running_mean: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %layer4.0.downsample.1.running_var: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %layer4.1.conv1.weight: Tensor[(512, 2048, 1, 1), float32] /* ty=Tensor[(512, 2048, 1, 1), float32] */, %layer4.1.bn1.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.bn1.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.bn1.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.bn1.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.conv2.weight: Tensor[(512, 512, 3, 3), float32] /* ty=Tensor[(512, 512, 3, 3), float32] */, %layer4.1.bn2.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.bn2.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.bn2.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.bn2.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.conv3.weight: Tensor[(2048, 512, 1, 1), float32] /* ty=Tensor[(2048, 512, 1, 1), float32] */, %layer4.1.bn3.weight: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %layer4.1.bn3.bias: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %layer4.1.bn3.running_mean: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %layer4.1.bn3.running_var: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %layer4.2.conv1.weight: Tensor[(512, 2048, 1, 1), float32] /* ty=Tensor[(512, 2048, 1, 1), float32] */, %layer4.2.bn1.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.2.bn1.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.2.bn1.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.2.bn1.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.2.conv2.weight: Tensor[(512, 512, 3, 3), float32] /* ty=Tensor[(512, 512, 3, 3), float32] */, %layer4.2.bn2.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.2.bn2.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.2.bn2.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.2.bn2.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.2.conv3.weight: Tensor[(2048, 512, 1, 1), float32] /* ty=Tensor[(2048, 512, 1, 1), float32] */, %layer4.2.bn3.weight: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %layer4.2.bn3.bias: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %layer4.2.bn3.running_mean: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %layer4.2.bn3.running_var: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %fc.weight: Tensor[(1000, 2048), float32] /* ty=Tensor[(1000, 2048), float32] */, %fc.bias: Tensor[(1000), float32] /* ty=Tensor[(1000), float32] */) -> Tensor[(1, 1000), float32] {
  %71 = fn (%p0150: Tensor[(1, 3, 224, 224), float32] /* ty=Tensor[(1, 3, 224, 224), float32] */, %p1114: Tensor[(64, 3, 7, 7), float32] /* ty=Tensor[(64, 3, 7, 7), float32] */, Primitive=1) -> Tensor[(1, 64, 112, 112), float32] {
    nn.conv2d(%p0150, %p1114, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]) /* ty=Tensor[(1, 64, 112, 112), float32] */
  } /* ty=fn (Tensor[(1, 3, 224, 224), float32], Tensor[(64, 3, 7, 7), float32]) -> Tensor[(1, 64, 112, 112), float32] */;
  %72 = %71(%input0, %conv1.weight) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %73 = fn (%p0149: Tensor[(1, 64, 112, 112), float32] /* ty=Tensor[(1, 64, 112, 112), float32] */, %p1113: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p249: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p348: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p448: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1) -> (Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) {
    nn.batch_norm(%p0149, %p1113, %p249, %p348, %p448) /* ty=(Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) */
  } /* ty=fn (Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32]) -> (Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %74 = %73(%72, %bn1.weight, %bn1.bias, %bn1.running_mean, %bn1.running_var) /* ty=(Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %75 = fn (%p0148: (Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) /* ty=(Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) */, Primitive=1) -> Tensor[(1, 64, 112, 112), float32] {
    %70 = %p0148.0 /* ty=Tensor[(1, 64, 112, 112), float32] */;
    nn.relu(%70) /* ty=Tensor[(1, 64, 112, 112), float32] */
  } /* ty=fn ((Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32])) -> Tensor[(1, 64, 112, 112), float32] */;
  %76 = %75(%74) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %77 = fn (%p0147: Tensor[(1, 64, 112, 112), float32] /* ty=Tensor[(1, 64, 112, 112), float32] */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    nn.max_pool2d(%p0147, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 64, 112, 112), float32]) -> Tensor[(1, 64, 56, 56), float32] */;
  %78 = %77(%76) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %79 = fn (%p0146: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p1112: Tensor[(64, 64, 1, 1), float32] /* ty=Tensor[(64, 64, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    nn.conv2d(%p0146, %p1112, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64, 64, 1, 1), float32]) -> Tensor[(1, 64, 56, 56), float32] */;
  %80 = %79(%78, %layer1.0.conv1.weight) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %81 = fn (%p0145: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p1111: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p248: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p347: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p447: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) {
    nn.batch_norm(%p0145, %p1111, %p248, %p347, %p447) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32]) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %82 = %81(%80, %layer1.0.bn1.weight, %layer1.0.bn1.bias, %layer1.0.bn1.running_mean, %layer1.0.bn1.running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %83 = fn (%p0144: (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    %69 = %p0144.0 /* ty=Tensor[(1, 64, 56, 56), float32] */;
    nn.relu(%69) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn ((Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32])) -> Tensor[(1, 64, 56, 56), float32] */;
  %84 = %83(%82) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %85 = fn (%p0143: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p1110: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    nn.conv2d(%p0143, %p1110, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64, 64, 3, 3), float32]) -> Tensor[(1, 64, 56, 56), float32] */;
  %86 = %85(%84, %layer1.0.conv2.weight) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %87 = fn (%p0142: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p1109: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p247: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p346: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p446: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) {
    nn.batch_norm(%p0142, %p1109, %p247, %p346, %p446) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32]) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %88 = %87(%86, %layer1.0.bn2.weight, %layer1.0.bn2.bias, %layer1.0.bn2.running_mean, %layer1.0.bn2.running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %89 = fn (%p0141: (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    %68 = %p0141.0 /* ty=Tensor[(1, 64, 56, 56), float32] */;
    nn.relu(%68) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn ((Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32])) -> Tensor[(1, 64, 56, 56), float32] */;
  %90 = %89(%88) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %91 = fn (%p0140: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p1108: Tensor[(256, 64, 1, 1), float32] /* ty=Tensor[(256, 64, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 256, 56, 56), float32] {
    nn.conv2d(%p0140, %p1108, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(256, 64, 1, 1), float32]) -> Tensor[(1, 256, 56, 56), float32] */;
  %92 = %91(%90, %layer1.0.conv3.weight) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %93 = fn (%p0139: Tensor[(1, 256, 56, 56), float32] /* ty=Tensor[(1, 256, 56, 56), float32] */, %p1107: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p246: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p345: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p445: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p0139, %p1107, %p246, %p345, %p445) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %94 = fn (%p0152: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p1116: Tensor[(256, 64, 1, 1), float32] /* ty=Tensor[(256, 64, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 256, 56, 56), float32] {
    nn.conv2d(%p0152, %p1116, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(256, 64, 1, 1), float32]) -> Tensor[(1, 256, 56, 56), float32] */;
  %95 = %94(%78, %layer1.0.downsample.0.weight) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %96 = fn (%p0151: Tensor[(1, 256, 56, 56), float32] /* ty=Tensor[(1, 256, 56, 56), float32] */, %p1115: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p250: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p349: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p449: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p0151, %p1115, %p250, %p349, %p449) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %97 = %93(%92, %layer1.0.bn3.weight, %layer1.0.bn3.bias, %layer1.0.bn3.running_mean, %layer1.0.bn3.running_var) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %98 = %96(%95, %layer1.0.downsample.1.weight, %layer1.0.downsample.1.bias, %layer1.0.downsample.1.running_mean, %layer1.0.downsample.1.running_var) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %99 = fn (%p0138: (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */, %p1106: (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 56, 56), float32] {
    %65 = %p0138.0 /* ty=Tensor[(1, 256, 56, 56), float32] */;
    %66 = %p1106.0 /* ty=Tensor[(1, 256, 56, 56), float32] */;
    %67 = add(%65, %66) /* ty=Tensor[(1, 256, 56, 56), float32] */;
    nn.relu(%67) /* ty=Tensor[(1, 256, 56, 56), float32] */
  } /* ty=fn ((Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]), (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 56, 56), float32] */;
  %100 = %99(%97, %98) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %101 = fn (%p0137: Tensor[(1, 256, 56, 56), float32] /* ty=Tensor[(1, 256, 56, 56), float32] */, %p1105: Tensor[(64, 256, 1, 1), float32] /* ty=Tensor[(64, 256, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    nn.conv2d(%p0137, %p1105, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 256, 56, 56), float32], Tensor[(64, 256, 1, 1), float32]) -> Tensor[(1, 64, 56, 56), float32] */;
  %102 = %101(%100, %layer1.1.conv1.weight) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %103 = fn (%p0136: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p1104: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p245: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p344: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p444: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) {
    nn.batch_norm(%p0136, %p1104, %p245, %p344, %p444) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32]) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %104 = %103(%102, %layer1.1.bn1.weight, %layer1.1.bn1.bias, %layer1.1.bn1.running_mean, %layer1.1.bn1.running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %105 = fn (%p0135: (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    %64 = %p0135.0 /* ty=Tensor[(1, 64, 56, 56), float32] */;
    nn.relu(%64) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn ((Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32])) -> Tensor[(1, 64, 56, 56), float32] */;
  %106 = %105(%104) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %107 = fn (%p0134: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p1103: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    nn.conv2d(%p0134, %p1103, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64, 64, 3, 3), float32]) -> Tensor[(1, 64, 56, 56), float32] */;
  %108 = %107(%106, %layer1.1.conv2.weight) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %109 = fn (%p0133: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p1102: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p244: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p343: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p443: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) {
    nn.batch_norm(%p0133, %p1102, %p244, %p343, %p443) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32]) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %110 = %109(%108, %layer1.1.bn2.weight, %layer1.1.bn2.bias, %layer1.1.bn2.running_mean, %layer1.1.bn2.running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %111 = fn (%p0132: (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    %63 = %p0132.0 /* ty=Tensor[(1, 64, 56, 56), float32] */;
    nn.relu(%63) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn ((Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32])) -> Tensor[(1, 64, 56, 56), float32] */;
  %112 = %111(%110) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %113 = fn (%p0131: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p1101: Tensor[(256, 64, 1, 1), float32] /* ty=Tensor[(256, 64, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 256, 56, 56), float32] {
    nn.conv2d(%p0131, %p1101, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(256, 64, 1, 1), float32]) -> Tensor[(1, 256, 56, 56), float32] */;
  %114 = %113(%112, %layer1.1.conv3.weight) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %115 = fn (%p0130: Tensor[(1, 256, 56, 56), float32] /* ty=Tensor[(1, 256, 56, 56), float32] */, %p1100: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p243: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p342: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p442: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p0130, %p1100, %p243, %p342, %p442) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %116 = %115(%114, %layer1.1.bn3.weight, %layer1.1.bn3.bias, %layer1.1.bn3.running_mean, %layer1.1.bn3.running_var) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %117 = fn (%p0129: (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */, %p199: Tensor[(1, 256, 56, 56), float32] /* ty=Tensor[(1, 256, 56, 56), float32] */, Primitive=1) -> Tensor[(1, 256, 56, 56), float32] {
    %61 = %p0129.0 /* ty=Tensor[(1, 256, 56, 56), float32] */;
    %62 = add(%61, %p199) /* ty=Tensor[(1, 256, 56, 56), float32] */;
    nn.relu(%62) /* ty=Tensor[(1, 256, 56, 56), float32] */
  } /* ty=fn ((Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]), Tensor[(1, 256, 56, 56), float32]) -> Tensor[(1, 256, 56, 56), float32] */;
  %118 = %117(%116, %100) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %119 = fn (%p0128: Tensor[(1, 256, 56, 56), float32] /* ty=Tensor[(1, 256, 56, 56), float32] */, %p198: Tensor[(64, 256, 1, 1), float32] /* ty=Tensor[(64, 256, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    nn.conv2d(%p0128, %p198, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 256, 56, 56), float32], Tensor[(64, 256, 1, 1), float32]) -> Tensor[(1, 64, 56, 56), float32] */;
  %120 = %119(%118, %layer1.2.conv1.weight) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %121 = fn (%p0127: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p197: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p242: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p341: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p441: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) {
    nn.batch_norm(%p0127, %p197, %p242, %p341, %p441) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32]) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %122 = %121(%120, %layer1.2.bn1.weight, %layer1.2.bn1.bias, %layer1.2.bn1.running_mean, %layer1.2.bn1.running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %123 = fn (%p0126: (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    %60 = %p0126.0 /* ty=Tensor[(1, 64, 56, 56), float32] */;
    nn.relu(%60) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn ((Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32])) -> Tensor[(1, 64, 56, 56), float32] */;
  %124 = %123(%122) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %125 = fn (%p0125: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p196: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    nn.conv2d(%p0125, %p196, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64, 64, 3, 3), float32]) -> Tensor[(1, 64, 56, 56), float32] */;
  %126 = %125(%124, %layer1.2.conv2.weight) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %127 = fn (%p0124: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p195: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p241: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p340: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p440: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) {
    nn.batch_norm(%p0124, %p195, %p241, %p340, %p440) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32]) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %128 = %127(%126, %layer1.2.bn2.weight, %layer1.2.bn2.bias, %layer1.2.bn2.running_mean, %layer1.2.bn2.running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %129 = fn (%p0123: (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    %59 = %p0123.0 /* ty=Tensor[(1, 64, 56, 56), float32] */;
    nn.relu(%59) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn ((Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32])) -> Tensor[(1, 64, 56, 56), float32] */;
  %130 = %129(%128) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %131 = fn (%p0122: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p194: Tensor[(256, 64, 1, 1), float32] /* ty=Tensor[(256, 64, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 256, 56, 56), float32] {
    nn.conv2d(%p0122, %p194, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(256, 64, 1, 1), float32]) -> Tensor[(1, 256, 56, 56), float32] */;
  %132 = %131(%130, %layer1.2.conv3.weight) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %133 = fn (%p0121: Tensor[(1, 256, 56, 56), float32] /* ty=Tensor[(1, 256, 56, 56), float32] */, %p193: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p240: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p339: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p439: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p0121, %p193, %p240, %p339, %p439) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %134 = %133(%132, %layer1.2.bn3.weight, %layer1.2.bn3.bias, %layer1.2.bn3.running_mean, %layer1.2.bn3.running_var) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %135 = fn (%p0120: (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */, %p192: Tensor[(1, 256, 56, 56), float32] /* ty=Tensor[(1, 256, 56, 56), float32] */, Primitive=1) -> Tensor[(1, 256, 56, 56), float32] {
    %57 = %p0120.0 /* ty=Tensor[(1, 256, 56, 56), float32] */;
    %58 = add(%57, %p192) /* ty=Tensor[(1, 256, 56, 56), float32] */;
    nn.relu(%58) /* ty=Tensor[(1, 256, 56, 56), float32] */
  } /* ty=fn ((Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]), Tensor[(1, 256, 56, 56), float32]) -> Tensor[(1, 256, 56, 56), float32] */;
  %136 = %135(%134, %118) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %137 = fn (%p0119: Tensor[(1, 256, 56, 56), float32] /* ty=Tensor[(1, 256, 56, 56), float32] */, %p191: Tensor[(128, 256, 1, 1), float32] /* ty=Tensor[(128, 256, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 128, 56, 56), float32] {
    nn.conv2d(%p0119, %p191, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 256, 56, 56), float32], Tensor[(128, 256, 1, 1), float32]) -> Tensor[(1, 128, 56, 56), float32] */;
  %138 = %137(%136, %layer2.0.conv1.weight) /* ty=Tensor[(1, 128, 56, 56), float32] */;
  %139 = fn (%p0118: Tensor[(1, 128, 56, 56), float32] /* ty=Tensor[(1, 128, 56, 56), float32] */, %p190: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p239: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p338: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p438: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, Primitive=1) -> (Tensor[(1, 128, 56, 56), float32], Tensor[(128), float32], Tensor[(128), float32]) {
    nn.batch_norm(%p0118, %p190, %p239, %p338, %p438) /* ty=(Tensor[(1, 128, 56, 56), float32], Tensor[(128), float32], Tensor[(128), float32]) */
  } /* ty=fn (Tensor[(1, 128, 56, 56), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32]) -> (Tensor[(1, 128, 56, 56), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %140 = %139(%138, %layer2.0.bn1.weight, %layer2.0.bn1.bias, %layer2.0.bn1.running_mean, %layer2.0.bn1.running_var) /* ty=(Tensor[(1, 128, 56, 56), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %141 = fn (%p0117: (Tensor[(1, 128, 56, 56), float32], Tensor[(128), float32], Tensor[(128), float32]) /* ty=(Tensor[(1, 128, 56, 56), float32], Tensor[(128), float32], Tensor[(128), float32]) */, Primitive=1) -> Tensor[(1, 128, 56, 56), float32] {
    %56 = %p0117.0 /* ty=Tensor[(1, 128, 56, 56), float32] */;
    nn.relu(%56) /* ty=Tensor[(1, 128, 56, 56), float32] */
  } /* ty=fn ((Tensor[(1, 128, 56, 56), float32], Tensor[(128), float32], Tensor[(128), float32])) -> Tensor[(1, 128, 56, 56), float32] */;
  %142 = %141(%140) /* ty=Tensor[(1, 128, 56, 56), float32] */;
  %143 = fn (%p0116: Tensor[(1, 128, 56, 56), float32] /* ty=Tensor[(1, 128, 56, 56), float32] */, %p189: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    nn.conv2d(%p0116, %p189, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 128, 56, 56), float32], Tensor[(128, 128, 3, 3), float32]) -> Tensor[(1, 128, 28, 28), float32] */;
  %144 = %143(%142, %layer2.0.conv2.weight) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %145 = fn (%p0115: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p188: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p238: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p337: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p437: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, Primitive=1) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) {
    nn.batch_norm(%p0115, %p188, %p238, %p337, %p437) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32]) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %146 = %145(%144, %layer2.0.bn2.weight, %layer2.0.bn2.bias, %layer2.0.bn2.running_mean, %layer2.0.bn2.running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %147 = fn (%p0114: (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    %55 = %p0114.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;
    nn.relu(%55) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32])) -> Tensor[(1, 128, 28, 28), float32] */;
  %148 = %147(%146) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %149 = fn (%p0113: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p187: Tensor[(512, 128, 1, 1), float32] /* ty=Tensor[(512, 128, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 512, 28, 28), float32] {
    nn.conv2d(%p0113, %p187, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(512, 128, 1, 1), float32]) -> Tensor[(1, 512, 28, 28), float32] */;
  %150 = %149(%148, %layer2.0.conv3.weight) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %151 = fn (%p0112: Tensor[(1, 512, 28, 28), float32] /* ty=Tensor[(1, 512, 28, 28), float32] */, %p186: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p237: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p336: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p436: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p0112, %p186, %p237, %p336, %p436) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %152 = fn (%p0154: Tensor[(1, 256, 56, 56), float32] /* ty=Tensor[(1, 256, 56, 56), float32] */, %p1118: Tensor[(512, 256, 1, 1), float32] /* ty=Tensor[(512, 256, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 512, 28, 28), float32] {
    nn.conv2d(%p0154, %p1118, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 256, 56, 56), float32], Tensor[(512, 256, 1, 1), float32]) -> Tensor[(1, 512, 28, 28), float32] */;
  %153 = %152(%136, %layer2.0.downsample.0.weight) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %154 = fn (%p0153: Tensor[(1, 512, 28, 28), float32] /* ty=Tensor[(1, 512, 28, 28), float32] */, %p1117: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p251: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p350: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p450: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p0153, %p1117, %p251, %p350, %p450) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %155 = %151(%150, %layer2.0.bn3.weight, %layer2.0.bn3.bias, %layer2.0.bn3.running_mean, %layer2.0.bn3.running_var) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %156 = %154(%153, %layer2.0.downsample.1.weight, %layer2.0.downsample.1.bias, %layer2.0.downsample.1.running_mean, %layer2.0.downsample.1.running_var) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %157 = fn (%p0111: (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */, %p185: (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */, Primitive=1) -> Tensor[(1, 512, 28, 28), float32] {
    %52 = %p0111.0 /* ty=Tensor[(1, 512, 28, 28), float32] */;
    %53 = %p185.0 /* ty=Tensor[(1, 512, 28, 28), float32] */;
    %54 = add(%52, %53) /* ty=Tensor[(1, 512, 28, 28), float32] */;
    nn.relu(%54) /* ty=Tensor[(1, 512, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]), (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32])) -> Tensor[(1, 512, 28, 28), float32] */;
  %158 = %157(%155, %156) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %159 = fn (%p0110: Tensor[(1, 512, 28, 28), float32] /* ty=Tensor[(1, 512, 28, 28), float32] */, %p184: Tensor[(128, 512, 1, 1), float32] /* ty=Tensor[(128, 512, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    nn.conv2d(%p0110, %p184, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 512, 28, 28), float32], Tensor[(128, 512, 1, 1), float32]) -> Tensor[(1, 128, 28, 28), float32] */;
  %160 = %159(%158, %layer2.1.conv1.weight) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %161 = fn (%p0109: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p183: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p236: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p335: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p435: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, Primitive=1) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) {
    nn.batch_norm(%p0109, %p183, %p236, %p335, %p435) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32]) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %162 = %161(%160, %layer2.1.bn1.weight, %layer2.1.bn1.bias, %layer2.1.bn1.running_mean, %layer2.1.bn1.running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %163 = fn (%p0108: (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    %51 = %p0108.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;
    nn.relu(%51) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32])) -> Tensor[(1, 128, 28, 28), float32] */;
  %164 = %163(%162) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %165 = fn (%p0107: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p182: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    nn.conv2d(%p0107, %p182, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128, 128, 3, 3), float32]) -> Tensor[(1, 128, 28, 28), float32] */;
  %166 = %165(%164, %layer2.1.conv2.weight) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %167 = fn (%p0106: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p181: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p235: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p334: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p434: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, Primitive=1) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) {
    nn.batch_norm(%p0106, %p181, %p235, %p334, %p434) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32]) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %168 = %167(%166, %layer2.1.bn2.weight, %layer2.1.bn2.bias, %layer2.1.bn2.running_mean, %layer2.1.bn2.running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %169 = fn (%p0105: (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    %50 = %p0105.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;
    nn.relu(%50) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32])) -> Tensor[(1, 128, 28, 28), float32] */;
  %170 = %169(%168) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %171 = fn (%p0104: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p180: Tensor[(512, 128, 1, 1), float32] /* ty=Tensor[(512, 128, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 512, 28, 28), float32] {
    nn.conv2d(%p0104, %p180, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(512, 128, 1, 1), float32]) -> Tensor[(1, 512, 28, 28), float32] */;
  %172 = %171(%170, %layer2.1.conv3.weight) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %173 = fn (%p0103: Tensor[(1, 512, 28, 28), float32] /* ty=Tensor[(1, 512, 28, 28), float32] */, %p179: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p234: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p333: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p433: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p0103, %p179, %p234, %p333, %p433) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %174 = %173(%172, %layer2.1.bn3.weight, %layer2.1.bn3.bias, %layer2.1.bn3.running_mean, %layer2.1.bn3.running_var) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %175 = fn (%p0102: (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */, %p178: Tensor[(1, 512, 28, 28), float32] /* ty=Tensor[(1, 512, 28, 28), float32] */, Primitive=1) -> Tensor[(1, 512, 28, 28), float32] {
    %48 = %p0102.0 /* ty=Tensor[(1, 512, 28, 28), float32] */;
    %49 = add(%48, %p178) /* ty=Tensor[(1, 512, 28, 28), float32] */;
    nn.relu(%49) /* ty=Tensor[(1, 512, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]), Tensor[(1, 512, 28, 28), float32]) -> Tensor[(1, 512, 28, 28), float32] */;
  %176 = %175(%174, %158) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %177 = fn (%p0101: Tensor[(1, 512, 28, 28), float32] /* ty=Tensor[(1, 512, 28, 28), float32] */, %p177: Tensor[(128, 512, 1, 1), float32] /* ty=Tensor[(128, 512, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    nn.conv2d(%p0101, %p177, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 512, 28, 28), float32], Tensor[(128, 512, 1, 1), float32]) -> Tensor[(1, 128, 28, 28), float32] */;
  %178 = %177(%176, %layer2.2.conv1.weight) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %179 = fn (%p0100: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p176: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p233: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p332: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p432: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, Primitive=1) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) {
    nn.batch_norm(%p0100, %p176, %p233, %p332, %p432) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32]) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %180 = %179(%178, %layer2.2.bn1.weight, %layer2.2.bn1.bias, %layer2.2.bn1.running_mean, %layer2.2.bn1.running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %181 = fn (%p099: (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    %47 = %p099.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;
    nn.relu(%47) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32])) -> Tensor[(1, 128, 28, 28), float32] */;
  %182 = %181(%180) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %183 = fn (%p098: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p175: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    nn.conv2d(%p098, %p175, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128, 128, 3, 3), float32]) -> Tensor[(1, 128, 28, 28), float32] */;
  %184 = %183(%182, %layer2.2.conv2.weight) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %185 = fn (%p097: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p174: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p232: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p331: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p431: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, Primitive=1) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) {
    nn.batch_norm(%p097, %p174, %p232, %p331, %p431) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32]) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %186 = %185(%184, %layer2.2.bn2.weight, %layer2.2.bn2.bias, %layer2.2.bn2.running_mean, %layer2.2.bn2.running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %187 = fn (%p096: (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    %46 = %p096.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;
    nn.relu(%46) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32])) -> Tensor[(1, 128, 28, 28), float32] */;
  %188 = %187(%186) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %189 = fn (%p095: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p173: Tensor[(512, 128, 1, 1), float32] /* ty=Tensor[(512, 128, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 512, 28, 28), float32] {
    nn.conv2d(%p095, %p173, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(512, 128, 1, 1), float32]) -> Tensor[(1, 512, 28, 28), float32] */;
  %190 = %189(%188, %layer2.2.conv3.weight) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %191 = fn (%p094: Tensor[(1, 512, 28, 28), float32] /* ty=Tensor[(1, 512, 28, 28), float32] */, %p172: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p231: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p330: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p430: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p094, %p172, %p231, %p330, %p430) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %192 = %191(%190, %layer2.2.bn3.weight, %layer2.2.bn3.bias, %layer2.2.bn3.running_mean, %layer2.2.bn3.running_var) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %193 = fn (%p093: (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */, %p171: Tensor[(1, 512, 28, 28), float32] /* ty=Tensor[(1, 512, 28, 28), float32] */, Primitive=1) -> Tensor[(1, 512, 28, 28), float32] {
    %44 = %p093.0 /* ty=Tensor[(1, 512, 28, 28), float32] */;
    %45 = add(%44, %p171) /* ty=Tensor[(1, 512, 28, 28), float32] */;
    nn.relu(%45) /* ty=Tensor[(1, 512, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]), Tensor[(1, 512, 28, 28), float32]) -> Tensor[(1, 512, 28, 28), float32] */;
  %194 = %193(%192, %176) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %195 = fn (%p092: Tensor[(1, 512, 28, 28), float32] /* ty=Tensor[(1, 512, 28, 28), float32] */, %p170: Tensor[(128, 512, 1, 1), float32] /* ty=Tensor[(128, 512, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    nn.conv2d(%p092, %p170, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 512, 28, 28), float32], Tensor[(128, 512, 1, 1), float32]) -> Tensor[(1, 128, 28, 28), float32] */;
  %196 = %195(%194, %layer2.3.conv1.weight) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %197 = fn (%p091: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p169: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p230: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p329: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p429: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, Primitive=1) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) {
    nn.batch_norm(%p091, %p169, %p230, %p329, %p429) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32]) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %198 = %197(%196, %layer2.3.bn1.weight, %layer2.3.bn1.bias, %layer2.3.bn1.running_mean, %layer2.3.bn1.running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %199 = fn (%p090: (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    %43 = %p090.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;
    nn.relu(%43) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32])) -> Tensor[(1, 128, 28, 28), float32] */;
  %200 = %199(%198) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %201 = fn (%p089: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p168: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    nn.conv2d(%p089, %p168, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128, 128, 3, 3), float32]) -> Tensor[(1, 128, 28, 28), float32] */;
  %202 = %201(%200, %layer2.3.conv2.weight) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %203 = fn (%p088: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p167: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p229: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p328: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p428: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, Primitive=1) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) {
    nn.batch_norm(%p088, %p167, %p229, %p328, %p428) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32]) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %204 = %203(%202, %layer2.3.bn2.weight, %layer2.3.bn2.bias, %layer2.3.bn2.running_mean, %layer2.3.bn2.running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %205 = fn (%p087: (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    %42 = %p087.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;
    nn.relu(%42) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32])) -> Tensor[(1, 128, 28, 28), float32] */;
  %206 = %205(%204) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %207 = fn (%p086: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p166: Tensor[(512, 128, 1, 1), float32] /* ty=Tensor[(512, 128, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 512, 28, 28), float32] {
    nn.conv2d(%p086, %p166, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(512, 128, 1, 1), float32]) -> Tensor[(1, 512, 28, 28), float32] */;
  %208 = %207(%206, %layer2.3.conv3.weight) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %209 = fn (%p085: Tensor[(1, 512, 28, 28), float32] /* ty=Tensor[(1, 512, 28, 28), float32] */, %p165: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p228: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p327: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p427: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p085, %p165, %p228, %p327, %p427) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %210 = %209(%208, %layer2.3.bn3.weight, %layer2.3.bn3.bias, %layer2.3.bn3.running_mean, %layer2.3.bn3.running_var) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %211 = fn (%p084: (Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */, %p164: Tensor[(1, 512, 28, 28), float32] /* ty=Tensor[(1, 512, 28, 28), float32] */, Primitive=1) -> Tensor[(1, 512, 28, 28), float32] {
    %40 = %p084.0 /* ty=Tensor[(1, 512, 28, 28), float32] */;
    %41 = add(%40, %p164) /* ty=Tensor[(1, 512, 28, 28), float32] */;
    nn.relu(%41) /* ty=Tensor[(1, 512, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]), Tensor[(1, 512, 28, 28), float32]) -> Tensor[(1, 512, 28, 28), float32] */;
  %212 = %211(%210, %194) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %213 = fn (%p083: Tensor[(1, 512, 28, 28), float32] /* ty=Tensor[(1, 512, 28, 28), float32] */, %p163: Tensor[(256, 512, 1, 1), float32] /* ty=Tensor[(256, 512, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 256, 28, 28), float32] {
    nn.conv2d(%p083, %p163, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 512, 28, 28), float32], Tensor[(256, 512, 1, 1), float32]) -> Tensor[(1, 256, 28, 28), float32] */;
  %214 = %213(%212, %layer3.0.conv1.weight) /* ty=Tensor[(1, 256, 28, 28), float32] */;
  %215 = fn (%p082: Tensor[(1, 256, 28, 28), float32] /* ty=Tensor[(1, 256, 28, 28), float32] */, %p162: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p227: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p326: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p426: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 28, 28), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p082, %p162, %p227, %p326, %p426) /* ty=(Tensor[(1, 256, 28, 28), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 28, 28), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 28, 28), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %216 = %215(%214, %layer3.0.bn1.weight, %layer3.0.bn1.bias, %layer3.0.bn1.running_mean, %layer3.0.bn1.running_var) /* ty=(Tensor[(1, 256, 28, 28), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %217 = fn (%p081: (Tensor[(1, 256, 28, 28), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 28, 28), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 28, 28), float32] {
    %39 = %p081.0 /* ty=Tensor[(1, 256, 28, 28), float32] */;
    nn.relu(%39) /* ty=Tensor[(1, 256, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 256, 28, 28), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 28, 28), float32] */;
  %218 = %217(%216) /* ty=Tensor[(1, 256, 28, 28), float32] */;
  %219 = fn (%p080: Tensor[(1, 256, 28, 28), float32] /* ty=Tensor[(1, 256, 28, 28), float32] */, %p161: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p080, %p161, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 256, 28, 28), float32], Tensor[(256, 256, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %220 = %219(%218, %layer3.0.conv2.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %221 = fn (%p079: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p160: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p226: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p325: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p425: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p079, %p160, %p226, %p325, %p425) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %222 = %221(%220, %layer3.0.bn2.weight, %layer3.0.bn2.bias, %layer3.0.bn2.running_mean, %layer3.0.bn2.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %223 = fn (%p078: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    %38 = %p078.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    nn.relu(%38) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 14, 14), float32] */;
  %224 = %223(%222) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %225 = fn (%p077: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p159: Tensor[(1024, 256, 1, 1), float32] /* ty=Tensor[(1024, 256, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 1024, 14, 14), float32] {
    nn.conv2d(%p077, %p159, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(1024, 256, 1, 1), float32]) -> Tensor[(1, 1024, 14, 14), float32] */;
  %226 = %225(%224, %layer3.0.conv3.weight) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %227 = fn (%p076: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, %p158: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p225: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p324: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p424: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) {
    nn.batch_norm(%p076, %p158, %p225, %p324, %p424) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */
  } /* ty=fn (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %228 = fn (%p0156: Tensor[(1, 512, 28, 28), float32] /* ty=Tensor[(1, 512, 28, 28), float32] */, %p1120: Tensor[(1024, 512, 1, 1), float32] /* ty=Tensor[(1024, 512, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 1024, 14, 14), float32] {
    nn.conv2d(%p0156, %p1120, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 512, 28, 28), float32], Tensor[(1024, 512, 1, 1), float32]) -> Tensor[(1, 1024, 14, 14), float32] */;
  %229 = %228(%212, %layer3.0.downsample.0.weight) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %230 = fn (%p0155: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, %p1119: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p252: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p351: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p451: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) {
    nn.batch_norm(%p0155, %p1119, %p252, %p351, %p451) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */
  } /* ty=fn (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %231 = %227(%226, %layer3.0.bn3.weight, %layer3.0.bn3.bias, %layer3.0.bn3.running_mean, %layer3.0.bn3.running_var) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %232 = %230(%229, %layer3.0.downsample.1.weight, %layer3.0.downsample.1.bias, %layer3.0.downsample.1.running_mean, %layer3.0.downsample.1.running_var) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %233 = fn (%p075: (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */, %p157: (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */, Primitive=1) -> Tensor[(1, 1024, 14, 14), float32] {
    %35 = %p075.0 /* ty=Tensor[(1, 1024, 14, 14), float32] */;
    %36 = %p157.0 /* ty=Tensor[(1, 1024, 14, 14), float32] */;
    %37 = add(%35, %36) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
    nn.relu(%37) /* ty=Tensor[(1, 1024, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]), (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32])) -> Tensor[(1, 1024, 14, 14), float32] */;
  %234 = %233(%231, %232) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %235 = fn (%p074: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, %p156: Tensor[(256, 1024, 1, 1), float32] /* ty=Tensor[(256, 1024, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p074, %p156, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 1024, 14, 14), float32], Tensor[(256, 1024, 1, 1), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %236 = %235(%234, %layer3.1.conv1.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %237 = fn (%p073: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p155: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p224: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p323: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p423: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p073, %p155, %p224, %p323, %p423) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %238 = %237(%236, %layer3.1.bn1.weight, %layer3.1.bn1.bias, %layer3.1.bn1.running_mean, %layer3.1.bn1.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %239 = fn (%p072: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    %34 = %p072.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    nn.relu(%34) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 14, 14), float32] */;
  %240 = %239(%238) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %241 = fn (%p071: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p154: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p071, %p154, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256, 256, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %242 = %241(%240, %layer3.1.conv2.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %243 = fn (%p070: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p153: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p223: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p322: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p422: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p070, %p153, %p223, %p322, %p422) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %244 = %243(%242, %layer3.1.bn2.weight, %layer3.1.bn2.bias, %layer3.1.bn2.running_mean, %layer3.1.bn2.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %245 = fn (%p069: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    %33 = %p069.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    nn.relu(%33) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 14, 14), float32] */;
  %246 = %245(%244) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %247 = fn (%p068: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p152: Tensor[(1024, 256, 1, 1), float32] /* ty=Tensor[(1024, 256, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 1024, 14, 14), float32] {
    nn.conv2d(%p068, %p152, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(1024, 256, 1, 1), float32]) -> Tensor[(1, 1024, 14, 14), float32] */;
  %248 = %247(%246, %layer3.1.conv3.weight) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %249 = fn (%p067: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, %p151: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p222: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p321: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p421: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) {
    nn.batch_norm(%p067, %p151, %p222, %p321, %p421) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */
  } /* ty=fn (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %250 = %249(%248, %layer3.1.bn3.weight, %layer3.1.bn3.bias, %layer3.1.bn3.running_mean, %layer3.1.bn3.running_var) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %251 = fn (%p066: (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */, %p150: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, Primitive=1) -> Tensor[(1, 1024, 14, 14), float32] {
    %31 = %p066.0 /* ty=Tensor[(1, 1024, 14, 14), float32] */;
    %32 = add(%31, %p150) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
    nn.relu(%32) /* ty=Tensor[(1, 1024, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]), Tensor[(1, 1024, 14, 14), float32]) -> Tensor[(1, 1024, 14, 14), float32] */;
  %252 = %251(%250, %234) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %253 = fn (%p065: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, %p149: Tensor[(256, 1024, 1, 1), float32] /* ty=Tensor[(256, 1024, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p065, %p149, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 1024, 14, 14), float32], Tensor[(256, 1024, 1, 1), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %254 = %253(%252, %layer3.2.conv1.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %255 = fn (%p064: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p148: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p221: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p320: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p420: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p064, %p148, %p221, %p320, %p420) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %256 = %255(%254, %layer3.2.bn1.weight, %layer3.2.bn1.bias, %layer3.2.bn1.running_mean, %layer3.2.bn1.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %257 = fn (%p063: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    %30 = %p063.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    nn.relu(%30) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 14, 14), float32] */;
  %258 = %257(%256) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %259 = fn (%p062: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p147: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p062, %p147, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256, 256, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %260 = %259(%258, %layer3.2.conv2.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %261 = fn (%p061: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p146: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p220: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p319: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p419: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p061, %p146, %p220, %p319, %p419) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %262 = %261(%260, %layer3.2.bn2.weight, %layer3.2.bn2.bias, %layer3.2.bn2.running_mean, %layer3.2.bn2.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %263 = fn (%p060: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    %29 = %p060.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    nn.relu(%29) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 14, 14), float32] */;
  %264 = %263(%262) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %265 = fn (%p059: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p145: Tensor[(1024, 256, 1, 1), float32] /* ty=Tensor[(1024, 256, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 1024, 14, 14), float32] {
    nn.conv2d(%p059, %p145, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(1024, 256, 1, 1), float32]) -> Tensor[(1, 1024, 14, 14), float32] */;
  %266 = %265(%264, %layer3.2.conv3.weight) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %267 = fn (%p058: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, %p144: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p219: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p318: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p418: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) {
    nn.batch_norm(%p058, %p144, %p219, %p318, %p418) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */
  } /* ty=fn (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %268 = %267(%266, %layer3.2.bn3.weight, %layer3.2.bn3.bias, %layer3.2.bn3.running_mean, %layer3.2.bn3.running_var) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %269 = fn (%p057: (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */, %p143: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, Primitive=1) -> Tensor[(1, 1024, 14, 14), float32] {
    %27 = %p057.0 /* ty=Tensor[(1, 1024, 14, 14), float32] */;
    %28 = add(%27, %p143) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
    nn.relu(%28) /* ty=Tensor[(1, 1024, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]), Tensor[(1, 1024, 14, 14), float32]) -> Tensor[(1, 1024, 14, 14), float32] */;
  %270 = %269(%268, %252) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %271 = fn (%p056: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, %p142: Tensor[(256, 1024, 1, 1), float32] /* ty=Tensor[(256, 1024, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p056, %p142, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 1024, 14, 14), float32], Tensor[(256, 1024, 1, 1), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %272 = %271(%270, %layer3.3.conv1.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %273 = fn (%p055: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p141: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p218: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p317: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p417: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p055, %p141, %p218, %p317, %p417) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %274 = %273(%272, %layer3.3.bn1.weight, %layer3.3.bn1.bias, %layer3.3.bn1.running_mean, %layer3.3.bn1.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %275 = fn (%p054: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    %26 = %p054.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    nn.relu(%26) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 14, 14), float32] */;
  %276 = %275(%274) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %277 = fn (%p053: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p140: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p053, %p140, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256, 256, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %278 = %277(%276, %layer3.3.conv2.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %279 = fn (%p052: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p139: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p217: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p316: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p416: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p052, %p139, %p217, %p316, %p416) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %280 = %279(%278, %layer3.3.bn2.weight, %layer3.3.bn2.bias, %layer3.3.bn2.running_mean, %layer3.3.bn2.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %281 = fn (%p051: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    %25 = %p051.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    nn.relu(%25) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 14, 14), float32] */;
  %282 = %281(%280) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %283 = fn (%p050: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p138: Tensor[(1024, 256, 1, 1), float32] /* ty=Tensor[(1024, 256, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 1024, 14, 14), float32] {
    nn.conv2d(%p050, %p138, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(1024, 256, 1, 1), float32]) -> Tensor[(1, 1024, 14, 14), float32] */;
  %284 = %283(%282, %layer3.3.conv3.weight) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %285 = fn (%p049: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, %p137: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p216: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p315: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p415: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) {
    nn.batch_norm(%p049, %p137, %p216, %p315, %p415) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */
  } /* ty=fn (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %286 = %285(%284, %layer3.3.bn3.weight, %layer3.3.bn3.bias, %layer3.3.bn3.running_mean, %layer3.3.bn3.running_var) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %287 = fn (%p048: (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */, %p136: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, Primitive=1) -> Tensor[(1, 1024, 14, 14), float32] {
    %23 = %p048.0 /* ty=Tensor[(1, 1024, 14, 14), float32] */;
    %24 = add(%23, %p136) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
    nn.relu(%24) /* ty=Tensor[(1, 1024, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]), Tensor[(1, 1024, 14, 14), float32]) -> Tensor[(1, 1024, 14, 14), float32] */;
  %288 = %287(%286, %270) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %289 = fn (%p047: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, %p135: Tensor[(256, 1024, 1, 1), float32] /* ty=Tensor[(256, 1024, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p047, %p135, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 1024, 14, 14), float32], Tensor[(256, 1024, 1, 1), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %290 = %289(%288, %layer3.4.conv1.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %291 = fn (%p046: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p134: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p215: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p314: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p414: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p046, %p134, %p215, %p314, %p414) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %292 = %291(%290, %layer3.4.bn1.weight, %layer3.4.bn1.bias, %layer3.4.bn1.running_mean, %layer3.4.bn1.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %293 = fn (%p045: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    %22 = %p045.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    nn.relu(%22) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 14, 14), float32] */;
  %294 = %293(%292) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %295 = fn (%p044: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p133: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p044, %p133, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256, 256, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %296 = %295(%294, %layer3.4.conv2.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %297 = fn (%p043: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p132: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p214: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p313: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p413: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p043, %p132, %p214, %p313, %p413) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %298 = %297(%296, %layer3.4.bn2.weight, %layer3.4.bn2.bias, %layer3.4.bn2.running_mean, %layer3.4.bn2.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %299 = fn (%p042: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    %21 = %p042.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    nn.relu(%21) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 14, 14), float32] */;
  %300 = %299(%298) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %301 = fn (%p041: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p131: Tensor[(1024, 256, 1, 1), float32] /* ty=Tensor[(1024, 256, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 1024, 14, 14), float32] {
    nn.conv2d(%p041, %p131, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(1024, 256, 1, 1), float32]) -> Tensor[(1, 1024, 14, 14), float32] */;
  %302 = %301(%300, %layer3.4.conv3.weight) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %303 = fn (%p040: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, %p130: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p213: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p312: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p412: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) {
    nn.batch_norm(%p040, %p130, %p213, %p312, %p412) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */
  } /* ty=fn (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %304 = %303(%302, %layer3.4.bn3.weight, %layer3.4.bn3.bias, %layer3.4.bn3.running_mean, %layer3.4.bn3.running_var) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %305 = fn (%p039: (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */, %p129: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, Primitive=1) -> Tensor[(1, 1024, 14, 14), float32] {
    %19 = %p039.0 /* ty=Tensor[(1, 1024, 14, 14), float32] */;
    %20 = add(%19, %p129) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
    nn.relu(%20) /* ty=Tensor[(1, 1024, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]), Tensor[(1, 1024, 14, 14), float32]) -> Tensor[(1, 1024, 14, 14), float32] */;
  %306 = %305(%304, %288) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %307 = fn (%p038: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, %p128: Tensor[(256, 1024, 1, 1), float32] /* ty=Tensor[(256, 1024, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p038, %p128, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 1024, 14, 14), float32], Tensor[(256, 1024, 1, 1), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %308 = %307(%306, %layer3.5.conv1.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %309 = fn (%p037: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p127: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p212: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p311: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p411: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p037, %p127, %p212, %p311, %p411) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %310 = %309(%308, %layer3.5.bn1.weight, %layer3.5.bn1.bias, %layer3.5.bn1.running_mean, %layer3.5.bn1.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %311 = fn (%p036: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    %18 = %p036.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    nn.relu(%18) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 14, 14), float32] */;
  %312 = %311(%310) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %313 = fn (%p035: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p126: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p035, %p126, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256, 256, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %314 = %313(%312, %layer3.5.conv2.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %315 = fn (%p034: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p125: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p211: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p310: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p410: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p034, %p125, %p211, %p310, %p410) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %316 = %315(%314, %layer3.5.bn2.weight, %layer3.5.bn2.bias, %layer3.5.bn2.running_mean, %layer3.5.bn2.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %317 = fn (%p033: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    %17 = %p033.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    nn.relu(%17) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 14, 14), float32] */;
  %318 = %317(%316) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %319 = fn (%p032: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p124: Tensor[(1024, 256, 1, 1), float32] /* ty=Tensor[(1024, 256, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 1024, 14, 14), float32] {
    nn.conv2d(%p032, %p124, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(1024, 256, 1, 1), float32]) -> Tensor[(1, 1024, 14, 14), float32] */;
  %320 = %319(%318, %layer3.5.conv3.weight) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %321 = fn (%p031: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, %p123: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p210: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p39: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, %p49: Tensor[(1024), float32] /* ty=Tensor[(1024), float32] */, Primitive=1) -> (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) {
    nn.batch_norm(%p031, %p123, %p210, %p39, %p49) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */
  } /* ty=fn (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32]) -> (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %322 = %321(%320, %layer3.5.bn3.weight, %layer3.5.bn3.bias, %layer3.5.bn3.running_mean, %layer3.5.bn3.running_var) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %323 = fn (%p030: (Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */, %p122: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, Primitive=1) -> Tensor[(1, 1024, 14, 14), float32] {
    %15 = %p030.0 /* ty=Tensor[(1, 1024, 14, 14), float32] */;
    %16 = add(%15, %p122) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
    nn.relu(%16) /* ty=Tensor[(1, 1024, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]), Tensor[(1, 1024, 14, 14), float32]) -> Tensor[(1, 1024, 14, 14), float32] */;
  %324 = %323(%322, %306) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %325 = fn (%p029: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, %p121: Tensor[(512, 1024, 1, 1), float32] /* ty=Tensor[(512, 1024, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 512, 14, 14), float32] {
    nn.conv2d(%p029, %p121, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 1024, 14, 14), float32], Tensor[(512, 1024, 1, 1), float32]) -> Tensor[(1, 512, 14, 14), float32] */;
  %326 = %325(%324, %layer4.0.conv1.weight) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %327 = fn (%p028: Tensor[(1, 512, 14, 14), float32] /* ty=Tensor[(1, 512, 14, 14), float32] */, %p120: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p29: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p38: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p48: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 14, 14), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p028, %p120, %p29, %p38, %p48) /* ty=(Tensor[(1, 512, 14, 14), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 14, 14), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 14, 14), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %328 = %327(%326, %layer4.0.bn1.weight, %layer4.0.bn1.bias, %layer4.0.bn1.running_mean, %layer4.0.bn1.running_var) /* ty=(Tensor[(1, 512, 14, 14), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %329 = fn (%p027: (Tensor[(1, 512, 14, 14), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 14, 14), float32], Tensor[(512), float32], Tensor[(512), float32]) */, Primitive=1) -> Tensor[(1, 512, 14, 14), float32] {
    %14 = %p027.0 /* ty=Tensor[(1, 512, 14, 14), float32] */;
    nn.relu(%14) /* ty=Tensor[(1, 512, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 512, 14, 14), float32], Tensor[(512), float32], Tensor[(512), float32])) -> Tensor[(1, 512, 14, 14), float32] */;
  %330 = %329(%328) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %331 = fn (%p026: Tensor[(1, 512, 14, 14), float32] /* ty=Tensor[(1, 512, 14, 14), float32] */, %p119: Tensor[(512, 512, 3, 3), float32] /* ty=Tensor[(512, 512, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    nn.conv2d(%p026, %p119, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn (Tensor[(1, 512, 14, 14), float32], Tensor[(512, 512, 3, 3), float32]) -> Tensor[(1, 512, 7, 7), float32] */;
  %332 = %331(%330, %layer4.0.conv2.weight) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %333 = fn (%p025: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p118: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p28: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p37: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p47: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p025, %p118, %p28, %p37, %p47) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %334 = %333(%332, %layer4.0.bn2.weight, %layer4.0.bn2.bias, %layer4.0.bn2.running_mean, %layer4.0.bn2.running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %335 = fn (%p024: (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    %13 = %p024.0 /* ty=Tensor[(1, 512, 7, 7), float32] */;
    nn.relu(%13) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn ((Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32])) -> Tensor[(1, 512, 7, 7), float32] */;
  %336 = %335(%334) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %337 = fn (%p023: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p117: Tensor[(2048, 512, 1, 1), float32] /* ty=Tensor[(2048, 512, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 2048, 7, 7), float32] {
    nn.conv2d(%p023, %p117, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(2048, 512, 1, 1), float32]) -> Tensor[(1, 2048, 7, 7), float32] */;
  %338 = %337(%336, %layer4.0.conv3.weight) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %339 = fn (%p022: Tensor[(1, 2048, 7, 7), float32] /* ty=Tensor[(1, 2048, 7, 7), float32] */, %p116: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %p27: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %p36: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %p46: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, Primitive=1) -> (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) {
    nn.batch_norm(%p022, %p116, %p27, %p36, %p46) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */
  } /* ty=fn (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32]) -> (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */;
  %340 = fn (%p0158: Tensor[(1, 1024, 14, 14), float32] /* ty=Tensor[(1, 1024, 14, 14), float32] */, %p1122: Tensor[(2048, 1024, 1, 1), float32] /* ty=Tensor[(2048, 1024, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 2048, 7, 7), float32] {
    nn.conv2d(%p0158, %p1122, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */
  } /* ty=fn (Tensor[(1, 1024, 14, 14), float32], Tensor[(2048, 1024, 1, 1), float32]) -> Tensor[(1, 2048, 7, 7), float32] */;
  %341 = %340(%324, %layer4.0.downsample.0.weight) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %342 = fn (%p0157: Tensor[(1, 2048, 7, 7), float32] /* ty=Tensor[(1, 2048, 7, 7), float32] */, %p1121: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %p253: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %p352: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %p452: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, Primitive=1) -> (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) {
    nn.batch_norm(%p0157, %p1121, %p253, %p352, %p452) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */
  } /* ty=fn (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32]) -> (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */;
  %343 = %339(%338, %layer4.0.bn3.weight, %layer4.0.bn3.bias, %layer4.0.bn3.running_mean, %layer4.0.bn3.running_var) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */;
  %344 = %342(%341, %layer4.0.downsample.1.weight, %layer4.0.downsample.1.bias, %layer4.0.downsample.1.running_mean, %layer4.0.downsample.1.running_var) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */;
  %345 = fn (%p021: (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */, %p115: (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */, Primitive=1) -> Tensor[(1, 2048, 7, 7), float32] {
    %10 = %p021.0 /* ty=Tensor[(1, 2048, 7, 7), float32] */;
    %11 = %p115.0 /* ty=Tensor[(1, 2048, 7, 7), float32] */;
    %12 = add(%10, %11) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
    nn.relu(%12) /* ty=Tensor[(1, 2048, 7, 7), float32] */
  } /* ty=fn ((Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]), (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32])) -> Tensor[(1, 2048, 7, 7), float32] */;
  %346 = %345(%343, %344) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %347 = fn (%p020: Tensor[(1, 2048, 7, 7), float32] /* ty=Tensor[(1, 2048, 7, 7), float32] */, %p114: Tensor[(512, 2048, 1, 1), float32] /* ty=Tensor[(512, 2048, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    nn.conv2d(%p020, %p114, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn (Tensor[(1, 2048, 7, 7), float32], Tensor[(512, 2048, 1, 1), float32]) -> Tensor[(1, 512, 7, 7), float32] */;
  %348 = %347(%346, %layer4.1.conv1.weight) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %349 = fn (%p019: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p113: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p26: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p35: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p45: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p019, %p113, %p26, %p35, %p45) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %350 = %349(%348, %layer4.1.bn1.weight, %layer4.1.bn1.bias, %layer4.1.bn1.running_mean, %layer4.1.bn1.running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %351 = fn (%p018: (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    %9 = %p018.0 /* ty=Tensor[(1, 512, 7, 7), float32] */;
    nn.relu(%9) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn ((Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32])) -> Tensor[(1, 512, 7, 7), float32] */;
  %352 = %351(%350) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %353 = fn (%p017: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p112: Tensor[(512, 512, 3, 3), float32] /* ty=Tensor[(512, 512, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    nn.conv2d(%p017, %p112, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(512, 512, 3, 3), float32]) -> Tensor[(1, 512, 7, 7), float32] */;
  %354 = %353(%352, %layer4.1.conv2.weight) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %355 = fn (%p016: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p111: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p25: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p34: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p44: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p016, %p111, %p25, %p34, %p44) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %356 = %355(%354, %layer4.1.bn2.weight, %layer4.1.bn2.bias, %layer4.1.bn2.running_mean, %layer4.1.bn2.running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %357 = fn (%p015: (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    %8 = %p015.0 /* ty=Tensor[(1, 512, 7, 7), float32] */;
    nn.relu(%8) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn ((Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32])) -> Tensor[(1, 512, 7, 7), float32] */;
  %358 = %357(%356) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %359 = fn (%p014: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p110: Tensor[(2048, 512, 1, 1), float32] /* ty=Tensor[(2048, 512, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 2048, 7, 7), float32] {
    nn.conv2d(%p014, %p110, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(2048, 512, 1, 1), float32]) -> Tensor[(1, 2048, 7, 7), float32] */;
  %360 = %359(%358, %layer4.1.conv3.weight) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %361 = fn (%p013: Tensor[(1, 2048, 7, 7), float32] /* ty=Tensor[(1, 2048, 7, 7), float32] */, %p19: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %p24: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %p33: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %p43: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, Primitive=1) -> (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) {
    nn.batch_norm(%p013, %p19, %p24, %p33, %p43) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */
  } /* ty=fn (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32]) -> (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */;
  %362 = %361(%360, %layer4.1.bn3.weight, %layer4.1.bn3.bias, %layer4.1.bn3.running_mean, %layer4.1.bn3.running_var) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */;
  %363 = fn (%p012: (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */, %p18: Tensor[(1, 2048, 7, 7), float32] /* ty=Tensor[(1, 2048, 7, 7), float32] */, Primitive=1) -> Tensor[(1, 2048, 7, 7), float32] {
    %6 = %p012.0 /* ty=Tensor[(1, 2048, 7, 7), float32] */;
    %7 = add(%6, %p18) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
    nn.relu(%7) /* ty=Tensor[(1, 2048, 7, 7), float32] */
  } /* ty=fn ((Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]), Tensor[(1, 2048, 7, 7), float32]) -> Tensor[(1, 2048, 7, 7), float32] */;
  %364 = %363(%362, %346) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %365 = fn (%p011: Tensor[(1, 2048, 7, 7), float32] /* ty=Tensor[(1, 2048, 7, 7), float32] */, %p17: Tensor[(512, 2048, 1, 1), float32] /* ty=Tensor[(512, 2048, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    nn.conv2d(%p011, %p17, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn (Tensor[(1, 2048, 7, 7), float32], Tensor[(512, 2048, 1, 1), float32]) -> Tensor[(1, 512, 7, 7), float32] */;
  %366 = %365(%364, %layer4.2.conv1.weight) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %367 = fn (%p010: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p16: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p23: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p32: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p42: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p010, %p16, %p23, %p32, %p42) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %368 = %367(%366, %layer4.2.bn1.weight, %layer4.2.bn1.bias, %layer4.2.bn1.running_mean, %layer4.2.bn1.running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %369 = fn (%p09: (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    %5 = %p09.0 /* ty=Tensor[(1, 512, 7, 7), float32] */;
    nn.relu(%5) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn ((Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32])) -> Tensor[(1, 512, 7, 7), float32] */;
  %370 = %369(%368) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %371 = fn (%p08: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p15: Tensor[(512, 512, 3, 3), float32] /* ty=Tensor[(512, 512, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    nn.conv2d(%p08, %p15, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(512, 512, 3, 3), float32]) -> Tensor[(1, 512, 7, 7), float32] */;
  %372 = %371(%370, %layer4.2.conv2.weight) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %373 = fn (%p07: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p14: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p22: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p31: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p41: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p07, %p14, %p22, %p31, %p41) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %374 = %373(%372, %layer4.2.bn2.weight, %layer4.2.bn2.bias, %layer4.2.bn2.running_mean, %layer4.2.bn2.running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %375 = fn (%p06: (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    %4 = %p06.0 /* ty=Tensor[(1, 512, 7, 7), float32] */;
    nn.relu(%4) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn ((Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32])) -> Tensor[(1, 512, 7, 7), float32] */;
  %376 = %375(%374) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %377 = fn (%p05: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p13: Tensor[(2048, 512, 1, 1), float32] /* ty=Tensor[(2048, 512, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 2048, 7, 7), float32] {
    nn.conv2d(%p05, %p13, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(2048, 512, 1, 1), float32]) -> Tensor[(1, 2048, 7, 7), float32] */;
  %378 = %377(%376, %layer4.2.conv3.weight) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %379 = fn (%p04: Tensor[(1, 2048, 7, 7), float32] /* ty=Tensor[(1, 2048, 7, 7), float32] */, %p12: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %p21: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %p3: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %p4: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, Primitive=1) -> (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) {
    nn.batch_norm(%p04, %p12, %p21, %p3, %p4) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */
  } /* ty=fn (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32]) -> (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */;
  %380 = %379(%378, %layer4.2.bn3.weight, %layer4.2.bn3.bias, %layer4.2.bn3.running_mean, %layer4.2.bn3.running_var) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */;
  %381 = fn (%p03: (Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */, %p11: Tensor[(1, 2048, 7, 7), float32] /* ty=Tensor[(1, 2048, 7, 7), float32] */, Primitive=1) -> Tensor[(1, 2048, 7, 7), float32] {
    %2 = %p03.0 /* ty=Tensor[(1, 2048, 7, 7), float32] */;
    %3 = add(%2, %p11) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
    nn.relu(%3) /* ty=Tensor[(1, 2048, 7, 7), float32] */
  } /* ty=fn ((Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]), Tensor[(1, 2048, 7, 7), float32]) -> Tensor[(1, 2048, 7, 7), float32] */;
  %382 = %381(%380, %364) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %383 = fn (%p02: Tensor[(1, 2048, 7, 7), float32] /* ty=Tensor[(1, 2048, 7, 7), float32] */, Primitive=1) -> Tensor[(1, 2048, 1, 1), float32] {
    nn.adaptive_avg_pool2d(%p02, output_size=[1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */
  } /* ty=fn (Tensor[(1, 2048, 7, 7), float32]) -> Tensor[(1, 2048, 1, 1), float32] */;
  %384 = %383(%382) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %385 = fn (%p01: Tensor[(1, 2048, 1, 1), float32] /* ty=Tensor[(1, 2048, 1, 1), float32] */, Primitive=1, relay.reshape_only=1) -> Tensor[(1, 2048), float32] {
    %1 = reshape(%p01, newshape=[0, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    squeeze(%1, axis=[2, 3]) /* ty=Tensor[(1, 2048), float32] */
  } /* ty=fn (Tensor[(1, 2048, 1, 1), float32]) -> Tensor[(1, 2048), float32] */;
  %387 = fn (%p0159: Tensor[(1000, 2048), float32] /* ty=Tensor[(1000, 2048), float32] */, Primitive=1) -> Tensor[(1000, 2048), float32] {
    %386 = transpose(%p0159, axes=[1, 0]) /* ty=Tensor[(2048, 1000), float32] */;
    transpose(%386, axes=[1, 0]) /* ty=Tensor[(1000, 2048), float32] */
  } /* ty=fn (Tensor[(1000, 2048), float32]) -> Tensor[(1000, 2048), float32] */;
  %388 = %385(%384) /* ty=Tensor[(1, 2048), float32] */;
  %389 = %387(%fc.weight) /* ty=Tensor[(1000, 2048), float32] */;
  %390 = fn (%p0: Tensor[(1, 2048), float32] /* ty=Tensor[(1, 2048), float32] */, %p1: Tensor[(1000, 2048), float32] /* ty=Tensor[(1000, 2048), float32] */, %p2: Tensor[(1000), float32] /* ty=Tensor[(1000), float32] */, Primitive=1) -> Tensor[(1, 1000), float32] {
    %0 = nn.dense(%p0, %p1, units=1000) /* ty=Tensor[(1, 1000), float32] */;
    add(%0, %p2) /* ty=Tensor[(1, 1000), float32] */
  } /* ty=fn (Tensor[(1, 2048), float32], Tensor[(1000, 2048), float32], Tensor[(1000), float32]) -> Tensor[(1, 1000), float32] */;
  %390(%388, %389, %fc.bias) /* ty=Tensor[(1, 1000), float32] */
} /* ty=fn (Tensor[(1, 3, 224, 224), float32], Tensor[(64, 3, 7, 7), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64, 64, 3, 3), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(256, 64, 1, 1), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256, 64, 1, 1), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(64, 256, 1, 1), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64, 64, 3, 3), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(256, 64, 1, 1), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(64, 256, 1, 1), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64, 64, 3, 3), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(256, 64, 1, 1), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(128, 256, 1, 1), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128, 128, 3, 3), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(512, 128, 1, 1), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512, 256, 1, 1), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(128, 512, 1, 1), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128, 128, 3, 3), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(512, 128, 1, 1), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(128, 512, 1, 1), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128, 128, 3, 3), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(512, 128, 1, 1), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(128, 512, 1, 1), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128, 128, 3, 3), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(512, 128, 1, 1), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(256, 512, 1, 1), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256, 256, 3, 3), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(1024, 256, 1, 1), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024, 512, 1, 1), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(256, 1024, 1, 1), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256, 256, 3, 3), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(1024, 256, 1, 1), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(256, 1024, 1, 1), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256, 256, 3, 3), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(1024, 256, 1, 1), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(256, 1024, 1, 1), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256, 256, 3, 3), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(1024, 256, 1, 1), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(256, 1024, 1, 1), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256, 256, 3, 3), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(1024, 256, 1, 1), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(256, 1024, 1, 1), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256, 256, 3, 3), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(1024, 256, 1, 1), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(1024), float32], Tensor[(512, 1024, 1, 1), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512, 512, 3, 3), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(2048, 512, 1, 1), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048, 1024, 1, 1), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(512, 2048, 1, 1), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512, 512, 3, 3), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(2048, 512, 1, 1), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(512, 2048, 1, 1), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512, 512, 3, 3), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(2048, 512, 1, 1), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(2048), float32], Tensor[(1000, 2048), float32], Tensor[(1000), float32]) -> Tensor[(1, 1000), float32] */