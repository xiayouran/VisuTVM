fn (%input0: Tensor[(1, 3, 224, 224), float32], %conv1.weight: Tensor[(64, 3, 7, 7), float32], %bn1.weight: Tensor[(64), float32], %bn1.bias: Tensor[(64), float32], %bn1.running_mean: Tensor[(64), float32], %bn1.running_var: Tensor[(64), float32], %layer1.0.conv1.weight: Tensor[(64, 64, 3, 3), float32], %layer1.0.bn1.weight: Tensor[(64), float32], %layer1.0.bn1.bias: Tensor[(64), float32], %layer1.0.bn1.running_mean: Tensor[(64), float32], %layer1.0.bn1.running_var: Tensor[(64), float32], %layer1.0.conv2.weight: Tensor[(64, 64, 3, 3), float32], %layer1.0.bn2.weight: Tensor[(64), float32], %layer1.0.bn2.bias: Tensor[(64), float32], %layer1.0.bn2.running_mean: Tensor[(64), float32], %layer1.0.bn2.running_var: Tensor[(64), float32], %layer1.1.conv1.weight: Tensor[(64, 64, 3, 3), float32], %layer1.1.bn1.weight: Tensor[(64), float32], %layer1.1.bn1.bias: Tensor[(64), float32], %layer1.1.bn1.running_mean: Tensor[(64), float32], %layer1.1.bn1.running_var: Tensor[(64), float32], %layer1.1.conv2.weight: Tensor[(64, 64, 3, 3), float32], %layer1.1.bn2.weight: Tensor[(64), float32], %layer1.1.bn2.bias: Tensor[(64), float32], %layer1.1.bn2.running_mean: Tensor[(64), float32], %layer1.1.bn2.running_var: Tensor[(64), float32], %layer2.0.conv1.weight: Tensor[(128, 64, 3, 3), float32], %layer2.0.bn1.weight: Tensor[(128), float32], %layer2.0.bn1.bias: Tensor[(128), float32], %layer2.0.bn1.running_mean: Tensor[(128), float32], %layer2.0.bn1.running_var: Tensor[(128), float32], %layer2.0.conv2.weight: Tensor[(128, 128, 3, 3), float32], %layer2.0.bn2.weight: Tensor[(128), float32], %layer2.0.bn2.bias: Tensor[(128), float32], %layer2.0.bn2.running_mean: Tensor[(128), float32], %layer2.0.bn2.running_var: Tensor[(128), float32], %layer2.0.downsample.0.weight: Tensor[(128, 64, 1, 1), float32], %layer2.0.downsample.1.weight: Tensor[(128), float32], %layer2.0.downsample.1.bias: Tensor[(128), float32], %layer2.0.downsample.1.running_mean: Tensor[(128), float32], %layer2.0.downsample.1.running_var: Tensor[(128), float32], %layer2.1.conv1.weight: Tensor[(128, 128, 3, 3), float32], %layer2.1.bn1.weight: Tensor[(128), float32], %layer2.1.bn1.bias: Tensor[(128), float32], %layer2.1.bn1.running_mean: Tensor[(128), float32], %layer2.1.bn1.running_var: Tensor[(128), float32], %layer2.1.conv2.weight: Tensor[(128, 128, 3, 3), float32], %layer2.1.bn2.weight: Tensor[(128), float32], %layer2.1.bn2.bias: Tensor[(128), float32], %layer2.1.bn2.running_mean: Tensor[(128), float32], %layer2.1.bn2.running_var: Tensor[(128), float32], %layer3.0.conv1.weight: Tensor[(256, 128, 3, 3), float32], %layer3.0.bn1.weight: Tensor[(256), float32], %layer3.0.bn1.bias: Tensor[(256), float32], %layer3.0.bn1.running_mean: Tensor[(256), float32], %layer3.0.bn1.running_var: Tensor[(256), float32], %layer3.0.conv2.weight: Tensor[(256, 256, 3, 3), float32], %layer3.0.bn2.weight: Tensor[(256), float32], %layer3.0.bn2.bias: Tensor[(256), float32], %layer3.0.bn2.running_mean: Tensor[(256), float32], %layer3.0.bn2.running_var: Tensor[(256), float32], %layer3.0.downsample.0.weight: Tensor[(256, 128, 1, 1), float32], %layer3.0.downsample.1.weight: Tensor[(256), float32], %layer3.0.downsample.1.bias: Tensor[(256), float32], %layer3.0.downsample.1.running_mean: Tensor[(256), float32], %layer3.0.downsample.1.running_var: Tensor[(256), float32], %layer3.1.conv1.weight: Tensor[(256, 256, 3, 3), float32], %layer3.1.bn1.weight: Tensor[(256), float32], %layer3.1.bn1.bias: Tensor[(256), float32], %layer3.1.bn1.running_mean: Tensor[(256), float32], %layer3.1.bn1.running_var: Tensor[(256), float32], %layer3.1.conv2.weight: Tensor[(256, 256, 3, 3), float32], %layer3.1.bn2.weight: Tensor[(256), float32], %layer3.1.bn2.bias: Tensor[(256), float32], %layer3.1.bn2.running_mean: Tensor[(256), float32], %layer3.1.bn2.running_var: Tensor[(256), float32], %layer4.0.conv1.weight: Tensor[(512, 256, 3, 3), float32], %layer4.0.bn1.weight: Tensor[(512), float32], %layer4.0.bn1.bias: Tensor[(512), float32], %layer4.0.bn1.running_mean: Tensor[(512), float32], %layer4.0.bn1.running_var: Tensor[(512), float32], %layer4.0.conv2.weight: Tensor[(512, 512, 3, 3), float32], %layer4.0.bn2.weight: Tensor[(512), float32], %layer4.0.bn2.bias: Tensor[(512), float32], %layer4.0.bn2.running_mean: Tensor[(512), float32], %layer4.0.bn2.running_var: Tensor[(512), float32], %layer4.0.downsample.0.weight: Tensor[(512, 256, 1, 1), float32], %layer4.0.downsample.1.weight: Tensor[(512), float32], %layer4.0.downsample.1.bias: Tensor[(512), float32], %layer4.0.downsample.1.running_mean: Tensor[(512), float32], %layer4.0.downsample.1.running_var: Tensor[(512), float32], %layer4.1.conv1.weight: Tensor[(512, 512, 3, 3), float32], %layer4.1.bn1.weight: Tensor[(512), float32], %layer4.1.bn1.bias: Tensor[(512), float32], %layer4.1.bn1.running_mean: Tensor[(512), float32], %layer4.1.bn1.running_var: Tensor[(512), float32], %layer4.1.conv2.weight: Tensor[(512, 512, 3, 3), float32], %layer4.1.bn2.weight: Tensor[(512), float32], %layer4.1.bn2.bias: Tensor[(512), float32], %layer4.1.bn2.running_mean: Tensor[(512), float32], %layer4.1.bn2.running_var: Tensor[(512), float32], %fc.weight: Tensor[(1000, 512), float32], %fc.bias: Tensor[(1000), float32]) {
  %0 = nn.conv2d(%input0, %conv1.weight, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]);
  %1 = nn.batch_norm(%0, %bn1.weight, %bn1.bias, %bn1.running_mean, %bn1.running_var);
  %2 = %1.0;
  %3 = nn.relu(%2);
  %4 = nn.max_pool2d(%3, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]);
  %5 = nn.conv2d(%4, %layer1.0.conv1.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %6 = nn.batch_norm(%5, %layer1.0.bn1.weight, %layer1.0.bn1.bias, %layer1.0.bn1.running_mean, %layer1.0.bn1.running_var);
  %7 = %6.0;
  %8 = nn.relu(%7);
  %9 = nn.conv2d(%8, %layer1.0.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %10 = nn.batch_norm(%9, %layer1.0.bn2.weight, %layer1.0.bn2.bias, %layer1.0.bn2.running_mean, %layer1.0.bn2.running_var);
  %11 = %10.0;
  %12 = add(%11, %4);
  %13 = nn.relu(%12);
  %14 = nn.conv2d(%13, %layer1.1.conv1.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %15 = nn.batch_norm(%14, %layer1.1.bn1.weight, %layer1.1.bn1.bias, %layer1.1.bn1.running_mean, %layer1.1.bn1.running_var);
  %16 = %15.0;
  %17 = nn.relu(%16);
  %18 = nn.conv2d(%17, %layer1.1.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %19 = nn.batch_norm(%18, %layer1.1.bn2.weight, %layer1.1.bn2.bias, %layer1.1.bn2.running_mean, %layer1.1.bn2.running_var);
  %20 = %19.0;
  %21 = add(%20, %13);
  %22 = nn.relu(%21);
  %23 = nn.conv2d(%22, %layer2.0.conv1.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %24 = nn.batch_norm(%23, %layer2.0.bn1.weight, %layer2.0.bn1.bias, %layer2.0.bn1.running_mean, %layer2.0.bn1.running_var);
  %25 = %24.0;
  %26 = nn.relu(%25);
  %27 = nn.conv2d(%26, %layer2.0.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %28 = nn.batch_norm(%27, %layer2.0.bn2.weight, %layer2.0.bn2.bias, %layer2.0.bn2.running_mean, %layer2.0.bn2.running_var);
  %29 = nn.conv2d(%22, %layer2.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %30 = nn.batch_norm(%29, %layer2.0.downsample.1.weight, %layer2.0.downsample.1.bias, %layer2.0.downsample.1.running_mean, %layer2.0.downsample.1.running_var);
  %31 = %28.0;
  %32 = %30.0;
  %33 = add(%31, %32);
  %34 = nn.relu(%33);
  %35 = nn.conv2d(%34, %layer2.1.conv1.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %36 = nn.batch_norm(%35, %layer2.1.bn1.weight, %layer2.1.bn1.bias, %layer2.1.bn1.running_mean, %layer2.1.bn1.running_var);
  %37 = %36.0;
  %38 = nn.relu(%37);
  %39 = nn.conv2d(%38, %layer2.1.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %40 = nn.batch_norm(%39, %layer2.1.bn2.weight, %layer2.1.bn2.bias, %layer2.1.bn2.running_mean, %layer2.1.bn2.running_var);
  %41 = %40.0;
  %42 = add(%41, %34);
  %43 = nn.relu(%42);
  %44 = nn.conv2d(%43, %layer3.0.conv1.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %45 = nn.batch_norm(%44, %layer3.0.bn1.weight, %layer3.0.bn1.bias, %layer3.0.bn1.running_mean, %layer3.0.bn1.running_var);
  %46 = %45.0;
  %47 = nn.relu(%46);
  %48 = nn.conv2d(%47, %layer3.0.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %49 = nn.batch_norm(%48, %layer3.0.bn2.weight, %layer3.0.bn2.bias, %layer3.0.bn2.running_mean, %layer3.0.bn2.running_var);
  %50 = nn.conv2d(%43, %layer3.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %51 = nn.batch_norm(%50, %layer3.0.downsample.1.weight, %layer3.0.downsample.1.bias, %layer3.0.downsample.1.running_mean, %layer3.0.downsample.1.running_var);
  %52 = %49.0;
  %53 = %51.0;
  %54 = add(%52, %53);
  %55 = nn.relu(%54);
  %56 = nn.conv2d(%55, %layer3.1.conv1.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %57 = nn.batch_norm(%56, %layer3.1.bn1.weight, %layer3.1.bn1.bias, %layer3.1.bn1.running_mean, %layer3.1.bn1.running_var);
  %58 = %57.0;
  %59 = nn.relu(%58);
  %60 = nn.conv2d(%59, %layer3.1.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %61 = nn.batch_norm(%60, %layer3.1.bn2.weight, %layer3.1.bn2.bias, %layer3.1.bn2.running_mean, %layer3.1.bn2.running_var);
  %62 = %61.0;
  %63 = add(%62, %55);
  %64 = nn.relu(%63);
  %65 = nn.conv2d(%64, %layer4.0.conv1.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %66 = nn.batch_norm(%65, %layer4.0.bn1.weight, %layer4.0.bn1.bias, %layer4.0.bn1.running_mean, %layer4.0.bn1.running_var);
  %67 = %66.0;
  %68 = nn.relu(%67);
  %69 = nn.conv2d(%68, %layer4.0.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %70 = nn.batch_norm(%69, %layer4.0.bn2.weight, %layer4.0.bn2.bias, %layer4.0.bn2.running_mean, %layer4.0.bn2.running_var);
  %71 = nn.conv2d(%64, %layer4.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %72 = nn.batch_norm(%71, %layer4.0.downsample.1.weight, %layer4.0.downsample.1.bias, %layer4.0.downsample.1.running_mean, %layer4.0.downsample.1.running_var);
  %73 = %70.0;
  %74 = %72.0;
  %75 = add(%73, %74);
  %76 = nn.relu(%75);
  %77 = nn.conv2d(%76, %layer4.1.conv1.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %78 = nn.batch_norm(%77, %layer4.1.bn1.weight, %layer4.1.bn1.bias, %layer4.1.bn1.running_mean, %layer4.1.bn1.running_var);
  %79 = %78.0;
  %80 = nn.relu(%79);
  %81 = nn.conv2d(%80, %layer4.1.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %82 = nn.batch_norm(%81, %layer4.1.bn2.weight, %layer4.1.bn2.bias, %layer4.1.bn2.running_mean, %layer4.1.bn2.running_var);
  %83 = %82.0;
  %84 = add(%83, %76);
  %85 = nn.relu(%84);
  %86 = nn.adaptive_avg_pool2d(%85, output_size=[1, 1]);
  %87 = reshape(%86, newshape=[0, -1, 1, 1]);
  %88 = transpose(%fc.weight, axes=[1, 0]);
  %89 = squeeze(%87, axis=[2, 3]);
  %90 = transpose(%88, axes=[1, 0]);
  %91 = nn.dense(%89, %90, units=1000);
  add(%91, %fc.bias)
}