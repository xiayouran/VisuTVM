fn (%input0: Tensor[(1, 3, 224, 224), float32] /* ty=Tensor[(1, 3, 224, 224), float32] */, %conv1.weight: Tensor[(64, 3, 7, 7), float32] /* ty=Tensor[(64, 3, 7, 7), float32] */, %bn1.weight: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %bn1.bias: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %bn1.running_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %bn1.running_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.conv1.weight: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, %layer1.0.bn1.weight: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.bn1.bias: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.bn1.running_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.bn1.running_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.conv2.weight: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, %layer1.0.bn2.weight: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.bn2.bias: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.bn2.running_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.0.bn2.running_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.conv1.weight: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, %layer1.1.bn1.weight: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.bn1.bias: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.bn1.running_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.bn1.running_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.conv2.weight: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, %layer1.1.bn2.weight: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.bn2.bias: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.bn2.running_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer1.1.bn2.running_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %layer2.0.conv1.weight: Tensor[(128, 64, 3, 3), float32] /* ty=Tensor[(128, 64, 3, 3), float32] */, %layer2.0.bn1.weight: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.bn1.bias: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.bn1.running_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.bn1.running_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.conv2.weight: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, %layer2.0.bn2.weight: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.bn2.bias: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.bn2.running_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.bn2.running_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.downsample.0.weight: Tensor[(128, 64, 1, 1), float32] /* ty=Tensor[(128, 64, 1, 1), float32] */, %layer2.0.downsample.1.weight: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.downsample.1.bias: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.downsample.1.running_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.0.downsample.1.running_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.conv1.weight: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, %layer2.1.bn1.weight: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.bn1.bias: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.bn1.running_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.bn1.running_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.conv2.weight: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, %layer2.1.bn2.weight: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.bn2.bias: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.bn2.running_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer2.1.bn2.running_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %layer3.0.conv1.weight: Tensor[(256, 128, 3, 3), float32] /* ty=Tensor[(256, 128, 3, 3), float32] */, %layer3.0.bn1.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.bn1.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.bn1.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.bn1.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.conv2.weight: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, %layer3.0.bn2.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.bn2.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.bn2.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.bn2.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.downsample.0.weight: Tensor[(256, 128, 1, 1), float32] /* ty=Tensor[(256, 128, 1, 1), float32] */, %layer3.0.downsample.1.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.downsample.1.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.downsample.1.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.0.downsample.1.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.conv1.weight: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, %layer3.1.bn1.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.bn1.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.bn1.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.bn1.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.conv2.weight: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, %layer3.1.bn2.weight: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.bn2.bias: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.bn2.running_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer3.1.bn2.running_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %layer4.0.conv1.weight: Tensor[(512, 256, 3, 3), float32] /* ty=Tensor[(512, 256, 3, 3), float32] */, %layer4.0.bn1.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.bn1.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.bn1.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.bn1.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.conv2.weight: Tensor[(512, 512, 3, 3), float32] /* ty=Tensor[(512, 512, 3, 3), float32] */, %layer4.0.bn2.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.bn2.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.bn2.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.bn2.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.downsample.0.weight: Tensor[(512, 256, 1, 1), float32] /* ty=Tensor[(512, 256, 1, 1), float32] */, %layer4.0.downsample.1.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.downsample.1.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.downsample.1.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.0.downsample.1.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.conv1.weight: Tensor[(512, 512, 3, 3), float32] /* ty=Tensor[(512, 512, 3, 3), float32] */, %layer4.1.bn1.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.bn1.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.bn1.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.bn1.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.conv2.weight: Tensor[(512, 512, 3, 3), float32] /* ty=Tensor[(512, 512, 3, 3), float32] */, %layer4.1.bn2.weight: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.bn2.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.bn2.running_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %layer4.1.bn2.running_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %fc.weight: Tensor[(1000, 512), float32] /* ty=Tensor[(1000, 512), float32] */, %fc.bias: Tensor[(1000), float32] /* ty=Tensor[(1000), float32] */) -> Tensor[(1, 1000), float32] {
  %30 = fn (%p054: Tensor[(1, 3, 224, 224), float32] /* ty=Tensor[(1, 3, 224, 224), float32] */, %p142: Tensor[(64, 3, 7, 7), float32] /* ty=Tensor[(64, 3, 7, 7), float32] */, Primitive=1) -> Tensor[(1, 64, 112, 112), float32] {
    nn.conv2d(%p054, %p142, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]) /* ty=Tensor[(1, 64, 112, 112), float32] */
  } /* ty=fn (Tensor[(1, 3, 224, 224), float32], Tensor[(64, 3, 7, 7), float32]) -> Tensor[(1, 64, 112, 112), float32] */;
  %31 = %30(%input0, %conv1.weight) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %32 = fn (%p053: Tensor[(1, 64, 112, 112), float32] /* ty=Tensor[(1, 64, 112, 112), float32] */, %p141: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p217: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p316: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p416: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1) -> (Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) {
    nn.batch_norm(%p053, %p141, %p217, %p316, %p416) /* ty=(Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) */
  } /* ty=fn (Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32]) -> (Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %33 = %32(%31, %bn1.weight, %bn1.bias, %bn1.running_mean, %bn1.running_var) /* ty=(Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %34 = fn (%p052: (Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) /* ty=(Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) */, Primitive=1) -> Tensor[(1, 64, 112, 112), float32] {
    %29 = %p052.0 /* ty=Tensor[(1, 64, 112, 112), float32] */;
    nn.relu(%29) /* ty=Tensor[(1, 64, 112, 112), float32] */
  } /* ty=fn ((Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32])) -> Tensor[(1, 64, 112, 112), float32] */;
  %35 = %34(%33) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %36 = fn (%p051: Tensor[(1, 64, 112, 112), float32] /* ty=Tensor[(1, 64, 112, 112), float32] */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    nn.max_pool2d(%p051, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 64, 112, 112), float32]) -> Tensor[(1, 64, 56, 56), float32] */;
  %37 = %36(%35) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %38 = fn (%p050: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p140: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    nn.conv2d(%p050, %p140, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64, 64, 3, 3), float32]) -> Tensor[(1, 64, 56, 56), float32] */;
  %39 = %38(%37, %layer1.0.conv1.weight) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %40 = fn (%p049: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p139: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p216: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p315: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p415: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) {
    nn.batch_norm(%p049, %p139, %p216, %p315, %p415) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32]) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %41 = %40(%39, %layer1.0.bn1.weight, %layer1.0.bn1.bias, %layer1.0.bn1.running_mean, %layer1.0.bn1.running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %42 = fn (%p048: (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    %28 = %p048.0 /* ty=Tensor[(1, 64, 56, 56), float32] */;
    nn.relu(%28) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn ((Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32])) -> Tensor[(1, 64, 56, 56), float32] */;
  %43 = %42(%41) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %44 = fn (%p047: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p138: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    nn.conv2d(%p047, %p138, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64, 64, 3, 3), float32]) -> Tensor[(1, 64, 56, 56), float32] */;
  %45 = %44(%43, %layer1.0.conv2.weight) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %46 = fn (%p046: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p137: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p215: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p314: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p414: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) {
    nn.batch_norm(%p046, %p137, %p215, %p314, %p414) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32]) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %47 = %46(%45, %layer1.0.bn2.weight, %layer1.0.bn2.bias, %layer1.0.bn2.running_mean, %layer1.0.bn2.running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %48 = fn (%p045: (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */, %p136: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    %26 = %p045.0 /* ty=Tensor[(1, 64, 56, 56), float32] */;
    %27 = add(%26, %p136) /* ty=Tensor[(1, 64, 56, 56), float32] */;
    nn.relu(%27) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn ((Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]), Tensor[(1, 64, 56, 56), float32]) -> Tensor[(1, 64, 56, 56), float32] */;
  %49 = %48(%47, %37) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %50 = fn (%p044: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p135: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    nn.conv2d(%p044, %p135, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64, 64, 3, 3), float32]) -> Tensor[(1, 64, 56, 56), float32] */;
  %51 = %50(%49, %layer1.1.conv1.weight) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %52 = fn (%p043: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p134: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p214: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p313: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p413: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) {
    nn.batch_norm(%p043, %p134, %p214, %p313, %p413) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32]) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %53 = %52(%51, %layer1.1.bn1.weight, %layer1.1.bn1.bias, %layer1.1.bn1.running_mean, %layer1.1.bn1.running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %54 = fn (%p042: (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    %25 = %p042.0 /* ty=Tensor[(1, 64, 56, 56), float32] */;
    nn.relu(%25) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn ((Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32])) -> Tensor[(1, 64, 56, 56), float32] */;
  %55 = %54(%53) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %56 = fn (%p041: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p133: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    nn.conv2d(%p041, %p133, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64, 64, 3, 3), float32]) -> Tensor[(1, 64, 56, 56), float32] */;
  %57 = %56(%55, %layer1.1.conv2.weight) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %58 = fn (%p040: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p132: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p213: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p312: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p412: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) {
    nn.batch_norm(%p040, %p132, %p213, %p312, %p412) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32]) -> (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %59 = %58(%57, %layer1.1.bn2.weight, %layer1.1.bn2.bias, %layer1.1.bn2.running_mean, %layer1.1.bn2.running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %60 = fn (%p039: (Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */, %p131: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, Primitive=1) -> Tensor[(1, 64, 56, 56), float32] {
    %23 = %p039.0 /* ty=Tensor[(1, 64, 56, 56), float32] */;
    %24 = add(%23, %p131) /* ty=Tensor[(1, 64, 56, 56), float32] */;
    nn.relu(%24) /* ty=Tensor[(1, 64, 56, 56), float32] */
  } /* ty=fn ((Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]), Tensor[(1, 64, 56, 56), float32]) -> Tensor[(1, 64, 56, 56), float32] */;
  %61 = %60(%59, %49) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %62 = fn (%p038: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p130: Tensor[(128, 64, 3, 3), float32] /* ty=Tensor[(128, 64, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    nn.conv2d(%p038, %p130, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(128, 64, 3, 3), float32]) -> Tensor[(1, 128, 28, 28), float32] */;
  %63 = %62(%61, %layer2.0.conv1.weight) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %64 = fn (%p037: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p129: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p212: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p311: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p411: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, Primitive=1) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) {
    nn.batch_norm(%p037, %p129, %p212, %p311, %p411) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32]) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %65 = %64(%63, %layer2.0.bn1.weight, %layer2.0.bn1.bias, %layer2.0.bn1.running_mean, %layer2.0.bn1.running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %66 = fn (%p036: (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    %22 = %p036.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;
    nn.relu(%22) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32])) -> Tensor[(1, 128, 28, 28), float32] */;
  %67 = %66(%65) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %68 = fn (%p035: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p128: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    nn.conv2d(%p035, %p128, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128, 128, 3, 3), float32]) -> Tensor[(1, 128, 28, 28), float32] */;
  %69 = %68(%67, %layer2.0.conv2.weight) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %70 = fn (%p034: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p127: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p211: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p310: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p410: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, Primitive=1) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) {
    nn.batch_norm(%p034, %p127, %p211, %p310, %p410) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32]) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %71 = fn (%p056: Tensor[(1, 64, 56, 56), float32] /* ty=Tensor[(1, 64, 56, 56), float32] */, %p144: Tensor[(128, 64, 1, 1), float32] /* ty=Tensor[(128, 64, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    nn.conv2d(%p056, %p144, strides=[2, 2], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 64, 56, 56), float32], Tensor[(128, 64, 1, 1), float32]) -> Tensor[(1, 128, 28, 28), float32] */;
  %72 = %71(%61, %layer2.0.downsample.0.weight) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %73 = fn (%p055: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p143: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p218: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p317: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p417: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, Primitive=1) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) {
    nn.batch_norm(%p055, %p143, %p218, %p317, %p417) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32]) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %74 = %70(%69, %layer2.0.bn2.weight, %layer2.0.bn2.bias, %layer2.0.bn2.running_mean, %layer2.0.bn2.running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %75 = %73(%72, %layer2.0.downsample.1.weight, %layer2.0.downsample.1.bias, %layer2.0.downsample.1.running_mean, %layer2.0.downsample.1.running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %76 = fn (%p033: (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */, %p126: (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    %19 = %p033.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;
    %20 = %p126.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;
    %21 = add(%19, %20) /* ty=Tensor[(1, 128, 28, 28), float32] */;
    nn.relu(%21) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]), (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32])) -> Tensor[(1, 128, 28, 28), float32] */;
  %77 = %76(%74, %75) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %78 = fn (%p032: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p125: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    nn.conv2d(%p032, %p125, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128, 128, 3, 3), float32]) -> Tensor[(1, 128, 28, 28), float32] */;
  %79 = %78(%77, %layer2.1.conv1.weight) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %80 = fn (%p031: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p124: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p210: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p39: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p49: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, Primitive=1) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) {
    nn.batch_norm(%p031, %p124, %p210, %p39, %p49) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32]) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %81 = %80(%79, %layer2.1.bn1.weight, %layer2.1.bn1.bias, %layer2.1.bn1.running_mean, %layer2.1.bn1.running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %82 = fn (%p030: (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    %18 = %p030.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;
    nn.relu(%18) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32])) -> Tensor[(1, 128, 28, 28), float32] */;
  %83 = %82(%81) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %84 = fn (%p029: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p123: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    nn.conv2d(%p029, %p123, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128, 128, 3, 3), float32]) -> Tensor[(1, 128, 28, 28), float32] */;
  %85 = %84(%83, %layer2.1.conv2.weight) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %86 = fn (%p028: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p122: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p29: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p38: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %p48: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, Primitive=1) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) {
    nn.batch_norm(%p028, %p122, %p29, %p38, %p48) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32]) -> (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %87 = %86(%85, %layer2.1.bn2.weight, %layer2.1.bn2.bias, %layer2.1.bn2.running_mean, %layer2.1.bn2.running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %88 = fn (%p027: (Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */, %p121: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, Primitive=1) -> Tensor[(1, 128, 28, 28), float32] {
    %16 = %p027.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;
    %17 = add(%16, %p121) /* ty=Tensor[(1, 128, 28, 28), float32] */;
    nn.relu(%17) /* ty=Tensor[(1, 128, 28, 28), float32] */
  } /* ty=fn ((Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]), Tensor[(1, 128, 28, 28), float32]) -> Tensor[(1, 128, 28, 28), float32] */;
  %89 = %88(%87, %77) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %90 = fn (%p026: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p120: Tensor[(256, 128, 3, 3), float32] /* ty=Tensor[(256, 128, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p026, %p120, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(256, 128, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %91 = %90(%89, %layer3.0.conv1.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %92 = fn (%p025: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p119: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p28: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p37: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p47: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p025, %p119, %p28, %p37, %p47) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %93 = %92(%91, %layer3.0.bn1.weight, %layer3.0.bn1.bias, %layer3.0.bn1.running_mean, %layer3.0.bn1.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %94 = fn (%p024: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    %15 = %p024.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    nn.relu(%15) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 14, 14), float32] */;
  %95 = %94(%93) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %96 = fn (%p023: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p118: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p023, %p118, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256, 256, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %97 = %96(%95, %layer3.0.conv2.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %98 = fn (%p022: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p117: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p27: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p36: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p46: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p022, %p117, %p27, %p36, %p46) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %99 = fn (%p058: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, %p146: Tensor[(256, 128, 1, 1), float32] /* ty=Tensor[(256, 128, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p058, %p146, strides=[2, 2], padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 128, 28, 28), float32], Tensor[(256, 128, 1, 1), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %100 = %99(%89, %layer3.0.downsample.0.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %101 = fn (%p057: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p145: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p219: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p318: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p418: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p057, %p145, %p219, %p318, %p418) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %102 = %98(%97, %layer3.0.bn2.weight, %layer3.0.bn2.bias, %layer3.0.bn2.running_mean, %layer3.0.bn2.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %103 = %101(%100, %layer3.0.downsample.1.weight, %layer3.0.downsample.1.bias, %layer3.0.downsample.1.running_mean, %layer3.0.downsample.1.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %104 = fn (%p021: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, %p116: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    %12 = %p021.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    %13 = %p116.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    %14 = add(%12, %13) /* ty=Tensor[(1, 256, 14, 14), float32] */;
    nn.relu(%14) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]), (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 14, 14), float32] */;
  %105 = %104(%102, %103) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %106 = fn (%p020: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p115: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p020, %p115, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256, 256, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %107 = %106(%105, %layer3.1.conv1.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %108 = fn (%p019: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p114: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p26: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p35: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p45: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p019, %p114, %p26, %p35, %p45) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %109 = %108(%107, %layer3.1.bn1.weight, %layer3.1.bn1.bias, %layer3.1.bn1.running_mean, %layer3.1.bn1.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %110 = fn (%p018: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    %11 = %p018.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    nn.relu(%11) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32])) -> Tensor[(1, 256, 14, 14), float32] */;
  %111 = %110(%109) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %112 = fn (%p017: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p113: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    nn.conv2d(%p017, %p113, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256, 256, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %113 = %112(%111, %layer3.1.conv2.weight) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %114 = fn (%p016: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p112: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p25: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p34: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %p44: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) {
    nn.batch_norm(%p016, %p112, %p25, %p34, %p44) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32]) -> (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %115 = %114(%113, %layer3.1.bn2.weight, %layer3.1.bn2.bias, %layer3.1.bn2.running_mean, %layer3.1.bn2.running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %116 = fn (%p015: (Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */, %p111: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, Primitive=1) -> Tensor[(1, 256, 14, 14), float32] {
    %9 = %p015.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;
    %10 = add(%9, %p111) /* ty=Tensor[(1, 256, 14, 14), float32] */;
    nn.relu(%10) /* ty=Tensor[(1, 256, 14, 14), float32] */
  } /* ty=fn ((Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]), Tensor[(1, 256, 14, 14), float32]) -> Tensor[(1, 256, 14, 14), float32] */;
  %117 = %116(%115, %105) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %118 = fn (%p014: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p110: Tensor[(512, 256, 3, 3), float32] /* ty=Tensor[(512, 256, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    nn.conv2d(%p014, %p110, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(512, 256, 3, 3), float32]) -> Tensor[(1, 512, 7, 7), float32] */;
  %119 = %118(%117, %layer4.0.conv1.weight) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %120 = fn (%p013: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p19: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p24: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p33: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p43: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p013, %p19, %p24, %p33, %p43) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %121 = %120(%119, %layer4.0.bn1.weight, %layer4.0.bn1.bias, %layer4.0.bn1.running_mean, %layer4.0.bn1.running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %122 = fn (%p012: (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    %8 = %p012.0 /* ty=Tensor[(1, 512, 7, 7), float32] */;
    nn.relu(%8) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn ((Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32])) -> Tensor[(1, 512, 7, 7), float32] */;
  %123 = %122(%121) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %124 = fn (%p011: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p18: Tensor[(512, 512, 3, 3), float32] /* ty=Tensor[(512, 512, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    nn.conv2d(%p011, %p18, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(512, 512, 3, 3), float32]) -> Tensor[(1, 512, 7, 7), float32] */;
  %125 = %124(%123, %layer4.0.conv2.weight) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %126 = fn (%p010: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p17: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p23: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p32: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p42: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p010, %p17, %p23, %p32, %p42) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %127 = fn (%p060: Tensor[(1, 256, 14, 14), float32] /* ty=Tensor[(1, 256, 14, 14), float32] */, %p148: Tensor[(512, 256, 1, 1), float32] /* ty=Tensor[(512, 256, 1, 1), float32] */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    nn.conv2d(%p060, %p148, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn (Tensor[(1, 256, 14, 14), float32], Tensor[(512, 256, 1, 1), float32]) -> Tensor[(1, 512, 7, 7), float32] */;
  %128 = %127(%117, %layer4.0.downsample.0.weight) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %129 = fn (%p059: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p147: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p220: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p319: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p419: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p059, %p147, %p220, %p319, %p419) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %130 = %126(%125, %layer4.0.bn2.weight, %layer4.0.bn2.bias, %layer4.0.bn2.running_mean, %layer4.0.bn2.running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %131 = %129(%128, %layer4.0.downsample.1.weight, %layer4.0.downsample.1.bias, %layer4.0.downsample.1.running_mean, %layer4.0.downsample.1.running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %132 = fn (%p09: (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */, %p16: (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    %5 = %p09.0 /* ty=Tensor[(1, 512, 7, 7), float32] */;
    %6 = %p16.0 /* ty=Tensor[(1, 512, 7, 7), float32] */;
    %7 = add(%5, %6) /* ty=Tensor[(1, 512, 7, 7), float32] */;
    nn.relu(%7) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn ((Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]), (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32])) -> Tensor[(1, 512, 7, 7), float32] */;
  %133 = %132(%130, %131) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %134 = fn (%p08: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p15: Tensor[(512, 512, 3, 3), float32] /* ty=Tensor[(512, 512, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    nn.conv2d(%p08, %p15, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(512, 512, 3, 3), float32]) -> Tensor[(1, 512, 7, 7), float32] */;
  %135 = %134(%133, %layer4.1.conv1.weight) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %136 = fn (%p07: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p14: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p22: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p31: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p41: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p07, %p14, %p22, %p31, %p41) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %137 = %136(%135, %layer4.1.bn1.weight, %layer4.1.bn1.bias, %layer4.1.bn1.running_mean, %layer4.1.bn1.running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %138 = fn (%p06: (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    %4 = %p06.0 /* ty=Tensor[(1, 512, 7, 7), float32] */;
    nn.relu(%4) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn ((Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32])) -> Tensor[(1, 512, 7, 7), float32] */;
  %139 = %138(%137) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %140 = fn (%p05: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p13: Tensor[(512, 512, 3, 3), float32] /* ty=Tensor[(512, 512, 3, 3), float32] */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    nn.conv2d(%p05, %p13, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(512, 512, 3, 3), float32]) -> Tensor[(1, 512, 7, 7), float32] */;
  %141 = %140(%139, %layer4.1.conv2.weight) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %142 = fn (%p04: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, %p12: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p21: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p3: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %p4: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, Primitive=1) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) {
    nn.batch_norm(%p04, %p12, %p21, %p3, %p4) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32]) -> (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %143 = %142(%141, %layer4.1.bn2.weight, %layer4.1.bn2.bias, %layer4.1.bn2.running_mean, %layer4.1.bn2.running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %144 = fn (%p03: (Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */, %p11: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, Primitive=1) -> Tensor[(1, 512, 7, 7), float32] {
    %2 = %p03.0 /* ty=Tensor[(1, 512, 7, 7), float32] */;
    %3 = add(%2, %p11) /* ty=Tensor[(1, 512, 7, 7), float32] */;
    nn.relu(%3) /* ty=Tensor[(1, 512, 7, 7), float32] */
  } /* ty=fn ((Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]), Tensor[(1, 512, 7, 7), float32]) -> Tensor[(1, 512, 7, 7), float32] */;
  %145 = %144(%143, %133) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %146 = fn (%p02: Tensor[(1, 512, 7, 7), float32] /* ty=Tensor[(1, 512, 7, 7), float32] */, Primitive=1) -> Tensor[(1, 512, 1, 1), float32] {
    nn.adaptive_avg_pool2d(%p02, output_size=[1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */
  } /* ty=fn (Tensor[(1, 512, 7, 7), float32]) -> Tensor[(1, 512, 1, 1), float32] */;
  %147 = %146(%145) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %148 = fn (%p01: Tensor[(1, 512, 1, 1), float32] /* ty=Tensor[(1, 512, 1, 1), float32] */, Primitive=1, relay.reshape_only=1) -> Tensor[(1, 512), float32] {
    %1 = reshape(%p01, newshape=[0, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    squeeze(%1, axis=[2, 3]) /* ty=Tensor[(1, 512), float32] */
  } /* ty=fn (Tensor[(1, 512, 1, 1), float32]) -> Tensor[(1, 512), float32] */;
  %150 = fn (%p061: Tensor[(1000, 512), float32] /* ty=Tensor[(1000, 512), float32] */, Primitive=1) -> Tensor[(1000, 512), float32] {
    %149 = transpose(%p061, axes=[1, 0]) /* ty=Tensor[(512, 1000), float32] */;
    transpose(%149, axes=[1, 0]) /* ty=Tensor[(1000, 512), float32] */
  } /* ty=fn (Tensor[(1000, 512), float32]) -> Tensor[(1000, 512), float32] */;
  %151 = %148(%147) /* ty=Tensor[(1, 512), float32] */;
  %152 = %150(%fc.weight) /* ty=Tensor[(1000, 512), float32] */;
  %153 = fn (%p0: Tensor[(1, 512), float32] /* ty=Tensor[(1, 512), float32] */, %p1: Tensor[(1000, 512), float32] /* ty=Tensor[(1000, 512), float32] */, %p2: Tensor[(1000), float32] /* ty=Tensor[(1000), float32] */, Primitive=1) -> Tensor[(1, 1000), float32] {
    %0 = nn.dense(%p0, %p1, units=1000) /* ty=Tensor[(1, 1000), float32] */;
    add(%0, %p2) /* ty=Tensor[(1, 1000), float32] */
  } /* ty=fn (Tensor[(1, 512), float32], Tensor[(1000, 512), float32], Tensor[(1000), float32]) -> Tensor[(1, 1000), float32] */;
  %153(%151, %152, %fc.bias) /* ty=Tensor[(1, 1000), float32] */
} /* ty=fn (Tensor[(1, 3, 224, 224), float32], Tensor[(64, 3, 7, 7), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64, 64, 3, 3), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64, 64, 3, 3), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64, 64, 3, 3), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64, 64, 3, 3), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(128, 64, 3, 3), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128, 128, 3, 3), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128, 64, 1, 1), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128, 128, 3, 3), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128, 128, 3, 3), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(256, 128, 3, 3), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256, 256, 3, 3), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256, 128, 1, 1), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256, 256, 3, 3), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256, 256, 3, 3), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(512, 256, 3, 3), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512, 512, 3, 3), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512, 256, 1, 1), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512, 512, 3, 3), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512, 512, 3, 3), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(1000, 512), float32], Tensor[(1000), float32]) -> Tensor[(1, 1000), float32] */