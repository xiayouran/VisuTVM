fn (%input0: Tensor[(1, 3, 224, 224), float32], %conv1.weight: Tensor[(64, 3, 7, 7), float32], %bn1.weight: Tensor[(64), float32], %bn1.bias: Tensor[(64), float32], %bn1.running_mean: Tensor[(64), float32], %bn1.running_var: Tensor[(64), float32], %layer1.0.conv1.weight: Tensor[(64, 64, 1, 1), float32], %layer1.0.bn1.weight: Tensor[(64), float32], %layer1.0.bn1.bias: Tensor[(64), float32], %layer1.0.bn1.running_mean: Tensor[(64), float32], %layer1.0.bn1.running_var: Tensor[(64), float32], %layer1.0.conv2.weight: Tensor[(64, 64, 3, 3), float32], %layer1.0.bn2.weight: Tensor[(64), float32], %layer1.0.bn2.bias: Tensor[(64), float32], %layer1.0.bn2.running_mean: Tensor[(64), float32], %layer1.0.bn2.running_var: Tensor[(64), float32], %layer1.0.conv3.weight: Tensor[(256, 64, 1, 1), float32], %layer1.0.bn3.weight: Tensor[(256), float32], %layer1.0.bn3.bias: Tensor[(256), float32], %layer1.0.bn3.running_mean: Tensor[(256), float32], %layer1.0.bn3.running_var: Tensor[(256), float32], %layer1.0.downsample.0.weight: Tensor[(256, 64, 1, 1), float32], %layer1.0.downsample.1.weight: Tensor[(256), float32], %layer1.0.downsample.1.bias: Tensor[(256), float32], %layer1.0.downsample.1.running_mean: Tensor[(256), float32], %layer1.0.downsample.1.running_var: Tensor[(256), float32], %layer1.1.conv1.weight: Tensor[(64, 256, 1, 1), float32], %layer1.1.bn1.weight: Tensor[(64), float32], %layer1.1.bn1.bias: Tensor[(64), float32], %layer1.1.bn1.running_mean: Tensor[(64), float32], %layer1.1.bn1.running_var: Tensor[(64), float32], %layer1.1.conv2.weight: Tensor[(64, 64, 3, 3), float32], %layer1.1.bn2.weight: Tensor[(64), float32], %layer1.1.bn2.bias: Tensor[(64), float32], %layer1.1.bn2.running_mean: Tensor[(64), float32], %layer1.1.bn2.running_var: Tensor[(64), float32], %layer1.1.conv3.weight: Tensor[(256, 64, 1, 1), float32], %layer1.1.bn3.weight: Tensor[(256), float32], %layer1.1.bn3.bias: Tensor[(256), float32], %layer1.1.bn3.running_mean: Tensor[(256), float32], %layer1.1.bn3.running_var: Tensor[(256), float32], %layer1.2.conv1.weight: Tensor[(64, 256, 1, 1), float32], %layer1.2.bn1.weight: Tensor[(64), float32], %layer1.2.bn1.bias: Tensor[(64), float32], %layer1.2.bn1.running_mean: Tensor[(64), float32], %layer1.2.bn1.running_var: Tensor[(64), float32], %layer1.2.conv2.weight: Tensor[(64, 64, 3, 3), float32], %layer1.2.bn2.weight: Tensor[(64), float32], %layer1.2.bn2.bias: Tensor[(64), float32], %layer1.2.bn2.running_mean: Tensor[(64), float32], %layer1.2.bn2.running_var: Tensor[(64), float32], %layer1.2.conv3.weight: Tensor[(256, 64, 1, 1), float32], %layer1.2.bn3.weight: Tensor[(256), float32], %layer1.2.bn3.bias: Tensor[(256), float32], %layer1.2.bn3.running_mean: Tensor[(256), float32], %layer1.2.bn3.running_var: Tensor[(256), float32], %layer2.0.conv1.weight: Tensor[(128, 256, 1, 1), float32], %layer2.0.bn1.weight: Tensor[(128), float32], %layer2.0.bn1.bias: Tensor[(128), float32], %layer2.0.bn1.running_mean: Tensor[(128), float32], %layer2.0.bn1.running_var: Tensor[(128), float32], %layer2.0.conv2.weight: Tensor[(128, 128, 3, 3), float32], %layer2.0.bn2.weight: Tensor[(128), float32], %layer2.0.bn2.bias: Tensor[(128), float32], %layer2.0.bn2.running_mean: Tensor[(128), float32], %layer2.0.bn2.running_var: Tensor[(128), float32], %layer2.0.conv3.weight: Tensor[(512, 128, 1, 1), float32], %layer2.0.bn3.weight: Tensor[(512), float32], %layer2.0.bn3.bias: Tensor[(512), float32], %layer2.0.bn3.running_mean: Tensor[(512), float32], %layer2.0.bn3.running_var: Tensor[(512), float32], %layer2.0.downsample.0.weight: Tensor[(512, 256, 1, 1), float32], %layer2.0.downsample.1.weight: Tensor[(512), float32], %layer2.0.downsample.1.bias: Tensor[(512), float32], %layer2.0.downsample.1.running_mean: Tensor[(512), float32], %layer2.0.downsample.1.running_var: Tensor[(512), float32], %layer2.1.conv1.weight: Tensor[(128, 512, 1, 1), float32], %layer2.1.bn1.weight: Tensor[(128), float32], %layer2.1.bn1.bias: Tensor[(128), float32], %layer2.1.bn1.running_mean: Tensor[(128), float32], %layer2.1.bn1.running_var: Tensor[(128), float32], %layer2.1.conv2.weight: Tensor[(128, 128, 3, 3), float32], %layer2.1.bn2.weight: Tensor[(128), float32], %layer2.1.bn2.bias: Tensor[(128), float32], %layer2.1.bn2.running_mean: Tensor[(128), float32], %layer2.1.bn2.running_var: Tensor[(128), float32], %layer2.1.conv3.weight: Tensor[(512, 128, 1, 1), float32], %layer2.1.bn3.weight: Tensor[(512), float32], %layer2.1.bn3.bias: Tensor[(512), float32], %layer2.1.bn3.running_mean: Tensor[(512), float32], %layer2.1.bn3.running_var: Tensor[(512), float32], %layer2.2.conv1.weight: Tensor[(128, 512, 1, 1), float32], %layer2.2.bn1.weight: Tensor[(128), float32], %layer2.2.bn1.bias: Tensor[(128), float32], %layer2.2.bn1.running_mean: Tensor[(128), float32], %layer2.2.bn1.running_var: Tensor[(128), float32], %layer2.2.conv2.weight: Tensor[(128, 128, 3, 3), float32], %layer2.2.bn2.weight: Tensor[(128), float32], %layer2.2.bn2.bias: Tensor[(128), float32], %layer2.2.bn2.running_mean: Tensor[(128), float32], %layer2.2.bn2.running_var: Tensor[(128), float32], %layer2.2.conv3.weight: Tensor[(512, 128, 1, 1), float32], %layer2.2.bn3.weight: Tensor[(512), float32], %layer2.2.bn3.bias: Tensor[(512), float32], %layer2.2.bn3.running_mean: Tensor[(512), float32], %layer2.2.bn3.running_var: Tensor[(512), float32], %layer2.3.conv1.weight: Tensor[(128, 512, 1, 1), float32], %layer2.3.bn1.weight: Tensor[(128), float32], %layer2.3.bn1.bias: Tensor[(128), float32], %layer2.3.bn1.running_mean: Tensor[(128), float32], %layer2.3.bn1.running_var: Tensor[(128), float32], %layer2.3.conv2.weight: Tensor[(128, 128, 3, 3), float32], %layer2.3.bn2.weight: Tensor[(128), float32], %layer2.3.bn2.bias: Tensor[(128), float32], %layer2.3.bn2.running_mean: Tensor[(128), float32], %layer2.3.bn2.running_var: Tensor[(128), float32], %layer2.3.conv3.weight: Tensor[(512, 128, 1, 1), float32], %layer2.3.bn3.weight: Tensor[(512), float32], %layer2.3.bn3.bias: Tensor[(512), float32], %layer2.3.bn3.running_mean: Tensor[(512), float32], %layer2.3.bn3.running_var: Tensor[(512), float32], %layer3.0.conv1.weight: Tensor[(256, 512, 1, 1), float32], %layer3.0.bn1.weight: Tensor[(256), float32], %layer3.0.bn1.bias: Tensor[(256), float32], %layer3.0.bn1.running_mean: Tensor[(256), float32], %layer3.0.bn1.running_var: Tensor[(256), float32], %layer3.0.conv2.weight: Tensor[(256, 256, 3, 3), float32], %layer3.0.bn2.weight: Tensor[(256), float32], %layer3.0.bn2.bias: Tensor[(256), float32], %layer3.0.bn2.running_mean: Tensor[(256), float32], %layer3.0.bn2.running_var: Tensor[(256), float32], %layer3.0.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %layer3.0.bn3.weight: Tensor[(1024), float32], %layer3.0.bn3.bias: Tensor[(1024), float32], %layer3.0.bn3.running_mean: Tensor[(1024), float32], %layer3.0.bn3.running_var: Tensor[(1024), float32], %layer3.0.downsample.0.weight: Tensor[(1024, 512, 1, 1), float32], %layer3.0.downsample.1.weight: Tensor[(1024), float32], %layer3.0.downsample.1.bias: Tensor[(1024), float32], %layer3.0.downsample.1.running_mean: Tensor[(1024), float32], %layer3.0.downsample.1.running_var: Tensor[(1024), float32], %layer3.1.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %layer3.1.bn1.weight: Tensor[(256), float32], %layer3.1.bn1.bias: Tensor[(256), float32], %layer3.1.bn1.running_mean: Tensor[(256), float32], %layer3.1.bn1.running_var: Tensor[(256), float32], %layer3.1.conv2.weight: Tensor[(256, 256, 3, 3), float32], %layer3.1.bn2.weight: Tensor[(256), float32], %layer3.1.bn2.bias: Tensor[(256), float32], %layer3.1.bn2.running_mean: Tensor[(256), float32], %layer3.1.bn2.running_var: Tensor[(256), float32], %layer3.1.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %layer3.1.bn3.weight: Tensor[(1024), float32], %layer3.1.bn3.bias: Tensor[(1024), float32], %layer3.1.bn3.running_mean: Tensor[(1024), float32], %layer3.1.bn3.running_var: Tensor[(1024), float32], %layer3.2.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %layer3.2.bn1.weight: Tensor[(256), float32], %layer3.2.bn1.bias: Tensor[(256), float32], %layer3.2.bn1.running_mean: Tensor[(256), float32], %layer3.2.bn1.running_var: Tensor[(256), float32], %layer3.2.conv2.weight: Tensor[(256, 256, 3, 3), float32], %layer3.2.bn2.weight: Tensor[(256), float32], %layer3.2.bn2.bias: Tensor[(256), float32], %layer3.2.bn2.running_mean: Tensor[(256), float32], %layer3.2.bn2.running_var: Tensor[(256), float32], %layer3.2.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %layer3.2.bn3.weight: Tensor[(1024), float32], %layer3.2.bn3.bias: Tensor[(1024), float32], %layer3.2.bn3.running_mean: Tensor[(1024), float32], %layer3.2.bn3.running_var: Tensor[(1024), float32], %layer3.3.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %layer3.3.bn1.weight: Tensor[(256), float32], %layer3.3.bn1.bias: Tensor[(256), float32], %layer3.3.bn1.running_mean: Tensor[(256), float32], %layer3.3.bn1.running_var: Tensor[(256), float32], %layer3.3.conv2.weight: Tensor[(256, 256, 3, 3), float32], %layer3.3.bn2.weight: Tensor[(256), float32], %layer3.3.bn2.bias: Tensor[(256), float32], %layer3.3.bn2.running_mean: Tensor[(256), float32], %layer3.3.bn2.running_var: Tensor[(256), float32], %layer3.3.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %layer3.3.bn3.weight: Tensor[(1024), float32], %layer3.3.bn3.bias: Tensor[(1024), float32], %layer3.3.bn3.running_mean: Tensor[(1024), float32], %layer3.3.bn3.running_var: Tensor[(1024), float32], %layer3.4.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %layer3.4.bn1.weight: Tensor[(256), float32], %layer3.4.bn1.bias: Tensor[(256), float32], %layer3.4.bn1.running_mean: Tensor[(256), float32], %layer3.4.bn1.running_var: Tensor[(256), float32], %layer3.4.conv2.weight: Tensor[(256, 256, 3, 3), float32], %layer3.4.bn2.weight: Tensor[(256), float32], %layer3.4.bn2.bias: Tensor[(256), float32], %layer3.4.bn2.running_mean: Tensor[(256), float32], %layer3.4.bn2.running_var: Tensor[(256), float32], %layer3.4.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %layer3.4.bn3.weight: Tensor[(1024), float32], %layer3.4.bn3.bias: Tensor[(1024), float32], %layer3.4.bn3.running_mean: Tensor[(1024), float32], %layer3.4.bn3.running_var: Tensor[(1024), float32], %layer3.5.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %layer3.5.bn1.weight: Tensor[(256), float32], %layer3.5.bn1.bias: Tensor[(256), float32], %layer3.5.bn1.running_mean: Tensor[(256), float32], %layer3.5.bn1.running_var: Tensor[(256), float32], %layer3.5.conv2.weight: Tensor[(256, 256, 3, 3), float32], %layer3.5.bn2.weight: Tensor[(256), float32], %layer3.5.bn2.bias: Tensor[(256), float32], %layer3.5.bn2.running_mean: Tensor[(256), float32], %layer3.5.bn2.running_var: Tensor[(256), float32], %layer3.5.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %layer3.5.bn3.weight: Tensor[(1024), float32], %layer3.5.bn3.bias: Tensor[(1024), float32], %layer3.5.bn3.running_mean: Tensor[(1024), float32], %layer3.5.bn3.running_var: Tensor[(1024), float32], %layer4.0.conv1.weight: Tensor[(512, 1024, 1, 1), float32], %layer4.0.bn1.weight: Tensor[(512), float32], %layer4.0.bn1.bias: Tensor[(512), float32], %layer4.0.bn1.running_mean: Tensor[(512), float32], %layer4.0.bn1.running_var: Tensor[(512), float32], %layer4.0.conv2.weight: Tensor[(512, 512, 3, 3), float32], %layer4.0.bn2.weight: Tensor[(512), float32], %layer4.0.bn2.bias: Tensor[(512), float32], %layer4.0.bn2.running_mean: Tensor[(512), float32], %layer4.0.bn2.running_var: Tensor[(512), float32], %layer4.0.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %layer4.0.bn3.weight: Tensor[(2048), float32], %layer4.0.bn3.bias: Tensor[(2048), float32], %layer4.0.bn3.running_mean: Tensor[(2048), float32], %layer4.0.bn3.running_var: Tensor[(2048), float32], %layer4.0.downsample.0.weight: Tensor[(2048, 1024, 1, 1), float32], %layer4.0.downsample.1.weight: Tensor[(2048), float32], %layer4.0.downsample.1.bias: Tensor[(2048), float32], %layer4.0.downsample.1.running_mean: Tensor[(2048), float32], %layer4.0.downsample.1.running_var: Tensor[(2048), float32], %layer4.1.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %layer4.1.bn1.weight: Tensor[(512), float32], %layer4.1.bn1.bias: Tensor[(512), float32], %layer4.1.bn1.running_mean: Tensor[(512), float32], %layer4.1.bn1.running_var: Tensor[(512), float32], %layer4.1.conv2.weight: Tensor[(512, 512, 3, 3), float32], %layer4.1.bn2.weight: Tensor[(512), float32], %layer4.1.bn2.bias: Tensor[(512), float32], %layer4.1.bn2.running_mean: Tensor[(512), float32], %layer4.1.bn2.running_var: Tensor[(512), float32], %layer4.1.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %layer4.1.bn3.weight: Tensor[(2048), float32], %layer4.1.bn3.bias: Tensor[(2048), float32], %layer4.1.bn3.running_mean: Tensor[(2048), float32], %layer4.1.bn3.running_var: Tensor[(2048), float32], %layer4.2.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %layer4.2.bn1.weight: Tensor[(512), float32], %layer4.2.bn1.bias: Tensor[(512), float32], %layer4.2.bn1.running_mean: Tensor[(512), float32], %layer4.2.bn1.running_var: Tensor[(512), float32], %layer4.2.conv2.weight: Tensor[(512, 512, 3, 3), float32], %layer4.2.bn2.weight: Tensor[(512), float32], %layer4.2.bn2.bias: Tensor[(512), float32], %layer4.2.bn2.running_mean: Tensor[(512), float32], %layer4.2.bn2.running_var: Tensor[(512), float32], %layer4.2.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %layer4.2.bn3.weight: Tensor[(2048), float32], %layer4.2.bn3.bias: Tensor[(2048), float32], %layer4.2.bn3.running_mean: Tensor[(2048), float32], %layer4.2.bn3.running_var: Tensor[(2048), float32], %fc.weight: Tensor[(1000, 2048), float32], %fc.bias: Tensor[(1000), float32]) {
  %0 = nn.conv2d(%input0, %conv1.weight, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]);
  %1 = nn.batch_norm(%0, %bn1.weight, %bn1.bias, %bn1.running_mean, %bn1.running_var);
  %2 = %1.0;
  %3 = nn.relu(%2);
  %4 = nn.max_pool2d(%3, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]);
  %5 = nn.conv2d(%4, %layer1.0.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %6 = nn.batch_norm(%5, %layer1.0.bn1.weight, %layer1.0.bn1.bias, %layer1.0.bn1.running_mean, %layer1.0.bn1.running_var);
  %7 = %6.0;
  %8 = nn.relu(%7);
  %9 = nn.conv2d(%8, %layer1.0.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %10 = nn.batch_norm(%9, %layer1.0.bn2.weight, %layer1.0.bn2.bias, %layer1.0.bn2.running_mean, %layer1.0.bn2.running_var);
  %11 = %10.0;
  %12 = nn.relu(%11);
  %13 = nn.conv2d(%12, %layer1.0.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %14 = nn.batch_norm(%13, %layer1.0.bn3.weight, %layer1.0.bn3.bias, %layer1.0.bn3.running_mean, %layer1.0.bn3.running_var);
  %15 = nn.conv2d(%4, %layer1.0.downsample.0.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %16 = nn.batch_norm(%15, %layer1.0.downsample.1.weight, %layer1.0.downsample.1.bias, %layer1.0.downsample.1.running_mean, %layer1.0.downsample.1.running_var);
  %17 = %14.0;
  %18 = %16.0;
  %19 = add(%17, %18);
  %20 = nn.relu(%19);
  %21 = nn.conv2d(%20, %layer1.1.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %22 = nn.batch_norm(%21, %layer1.1.bn1.weight, %layer1.1.bn1.bias, %layer1.1.bn1.running_mean, %layer1.1.bn1.running_var);
  %23 = %22.0;
  %24 = nn.relu(%23);
  %25 = nn.conv2d(%24, %layer1.1.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %26 = nn.batch_norm(%25, %layer1.1.bn2.weight, %layer1.1.bn2.bias, %layer1.1.bn2.running_mean, %layer1.1.bn2.running_var);
  %27 = %26.0;
  %28 = nn.relu(%27);
  %29 = nn.conv2d(%28, %layer1.1.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %30 = nn.batch_norm(%29, %layer1.1.bn3.weight, %layer1.1.bn3.bias, %layer1.1.bn3.running_mean, %layer1.1.bn3.running_var);
  %31 = %30.0;
  %32 = add(%31, %20);
  %33 = nn.relu(%32);
  %34 = nn.conv2d(%33, %layer1.2.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %35 = nn.batch_norm(%34, %layer1.2.bn1.weight, %layer1.2.bn1.bias, %layer1.2.bn1.running_mean, %layer1.2.bn1.running_var);
  %36 = %35.0;
  %37 = nn.relu(%36);
  %38 = nn.conv2d(%37, %layer1.2.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %39 = nn.batch_norm(%38, %layer1.2.bn2.weight, %layer1.2.bn2.bias, %layer1.2.bn2.running_mean, %layer1.2.bn2.running_var);
  %40 = %39.0;
  %41 = nn.relu(%40);
  %42 = nn.conv2d(%41, %layer1.2.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %43 = nn.batch_norm(%42, %layer1.2.bn3.weight, %layer1.2.bn3.bias, %layer1.2.bn3.running_mean, %layer1.2.bn3.running_var);
  %44 = %43.0;
  %45 = add(%44, %33);
  %46 = nn.relu(%45);
  %47 = nn.conv2d(%46, %layer2.0.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %48 = nn.batch_norm(%47, %layer2.0.bn1.weight, %layer2.0.bn1.bias, %layer2.0.bn1.running_mean, %layer2.0.bn1.running_var);
  %49 = %48.0;
  %50 = nn.relu(%49);
  %51 = nn.conv2d(%50, %layer2.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %52 = nn.batch_norm(%51, %layer2.0.bn2.weight, %layer2.0.bn2.bias, %layer2.0.bn2.running_mean, %layer2.0.bn2.running_var);
  %53 = %52.0;
  %54 = nn.relu(%53);
  %55 = nn.conv2d(%54, %layer2.0.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %56 = nn.batch_norm(%55, %layer2.0.bn3.weight, %layer2.0.bn3.bias, %layer2.0.bn3.running_mean, %layer2.0.bn3.running_var);
  %57 = nn.conv2d(%46, %layer2.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %58 = nn.batch_norm(%57, %layer2.0.downsample.1.weight, %layer2.0.downsample.1.bias, %layer2.0.downsample.1.running_mean, %layer2.0.downsample.1.running_var);
  %59 = %56.0;
  %60 = %58.0;
  %61 = add(%59, %60);
  %62 = nn.relu(%61);
  %63 = nn.conv2d(%62, %layer2.1.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %64 = nn.batch_norm(%63, %layer2.1.bn1.weight, %layer2.1.bn1.bias, %layer2.1.bn1.running_mean, %layer2.1.bn1.running_var);
  %65 = %64.0;
  %66 = nn.relu(%65);
  %67 = nn.conv2d(%66, %layer2.1.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %68 = nn.batch_norm(%67, %layer2.1.bn2.weight, %layer2.1.bn2.bias, %layer2.1.bn2.running_mean, %layer2.1.bn2.running_var);
  %69 = %68.0;
  %70 = nn.relu(%69);
  %71 = nn.conv2d(%70, %layer2.1.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %72 = nn.batch_norm(%71, %layer2.1.bn3.weight, %layer2.1.bn3.bias, %layer2.1.bn3.running_mean, %layer2.1.bn3.running_var);
  %73 = %72.0;
  %74 = add(%73, %62);
  %75 = nn.relu(%74);
  %76 = nn.conv2d(%75, %layer2.2.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %77 = nn.batch_norm(%76, %layer2.2.bn1.weight, %layer2.2.bn1.bias, %layer2.2.bn1.running_mean, %layer2.2.bn1.running_var);
  %78 = %77.0;
  %79 = nn.relu(%78);
  %80 = nn.conv2d(%79, %layer2.2.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %81 = nn.batch_norm(%80, %layer2.2.bn2.weight, %layer2.2.bn2.bias, %layer2.2.bn2.running_mean, %layer2.2.bn2.running_var);
  %82 = %81.0;
  %83 = nn.relu(%82);
  %84 = nn.conv2d(%83, %layer2.2.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %85 = nn.batch_norm(%84, %layer2.2.bn3.weight, %layer2.2.bn3.bias, %layer2.2.bn3.running_mean, %layer2.2.bn3.running_var);
  %86 = %85.0;
  %87 = add(%86, %75);
  %88 = nn.relu(%87);
  %89 = nn.conv2d(%88, %layer2.3.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %90 = nn.batch_norm(%89, %layer2.3.bn1.weight, %layer2.3.bn1.bias, %layer2.3.bn1.running_mean, %layer2.3.bn1.running_var);
  %91 = %90.0;
  %92 = nn.relu(%91);
  %93 = nn.conv2d(%92, %layer2.3.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %94 = nn.batch_norm(%93, %layer2.3.bn2.weight, %layer2.3.bn2.bias, %layer2.3.bn2.running_mean, %layer2.3.bn2.running_var);
  %95 = %94.0;
  %96 = nn.relu(%95);
  %97 = nn.conv2d(%96, %layer2.3.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %98 = nn.batch_norm(%97, %layer2.3.bn3.weight, %layer2.3.bn3.bias, %layer2.3.bn3.running_mean, %layer2.3.bn3.running_var);
  %99 = %98.0;
  %100 = add(%99, %88);
  %101 = nn.relu(%100);
  %102 = nn.conv2d(%101, %layer3.0.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %103 = nn.batch_norm(%102, %layer3.0.bn1.weight, %layer3.0.bn1.bias, %layer3.0.bn1.running_mean, %layer3.0.bn1.running_var);
  %104 = %103.0;
  %105 = nn.relu(%104);
  %106 = nn.conv2d(%105, %layer3.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %107 = nn.batch_norm(%106, %layer3.0.bn2.weight, %layer3.0.bn2.bias, %layer3.0.bn2.running_mean, %layer3.0.bn2.running_var);
  %108 = %107.0;
  %109 = nn.relu(%108);
  %110 = nn.conv2d(%109, %layer3.0.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %111 = nn.batch_norm(%110, %layer3.0.bn3.weight, %layer3.0.bn3.bias, %layer3.0.bn3.running_mean, %layer3.0.bn3.running_var);
  %112 = nn.conv2d(%101, %layer3.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %113 = nn.batch_norm(%112, %layer3.0.downsample.1.weight, %layer3.0.downsample.1.bias, %layer3.0.downsample.1.running_mean, %layer3.0.downsample.1.running_var);
  %114 = %111.0;
  %115 = %113.0;
  %116 = add(%114, %115);
  %117 = nn.relu(%116);
  %118 = nn.conv2d(%117, %layer3.1.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %119 = nn.batch_norm(%118, %layer3.1.bn1.weight, %layer3.1.bn1.bias, %layer3.1.bn1.running_mean, %layer3.1.bn1.running_var);
  %120 = %119.0;
  %121 = nn.relu(%120);
  %122 = nn.conv2d(%121, %layer3.1.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %123 = nn.batch_norm(%122, %layer3.1.bn2.weight, %layer3.1.bn2.bias, %layer3.1.bn2.running_mean, %layer3.1.bn2.running_var);
  %124 = %123.0;
  %125 = nn.relu(%124);
  %126 = nn.conv2d(%125, %layer3.1.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %127 = nn.batch_norm(%126, %layer3.1.bn3.weight, %layer3.1.bn3.bias, %layer3.1.bn3.running_mean, %layer3.1.bn3.running_var);
  %128 = %127.0;
  %129 = add(%128, %117);
  %130 = nn.relu(%129);
  %131 = nn.conv2d(%130, %layer3.2.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %132 = nn.batch_norm(%131, %layer3.2.bn1.weight, %layer3.2.bn1.bias, %layer3.2.bn1.running_mean, %layer3.2.bn1.running_var);
  %133 = %132.0;
  %134 = nn.relu(%133);
  %135 = nn.conv2d(%134, %layer3.2.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %136 = nn.batch_norm(%135, %layer3.2.bn2.weight, %layer3.2.bn2.bias, %layer3.2.bn2.running_mean, %layer3.2.bn2.running_var);
  %137 = %136.0;
  %138 = nn.relu(%137);
  %139 = nn.conv2d(%138, %layer3.2.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %140 = nn.batch_norm(%139, %layer3.2.bn3.weight, %layer3.2.bn3.bias, %layer3.2.bn3.running_mean, %layer3.2.bn3.running_var);
  %141 = %140.0;
  %142 = add(%141, %130);
  %143 = nn.relu(%142);
  %144 = nn.conv2d(%143, %layer3.3.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %145 = nn.batch_norm(%144, %layer3.3.bn1.weight, %layer3.3.bn1.bias, %layer3.3.bn1.running_mean, %layer3.3.bn1.running_var);
  %146 = %145.0;
  %147 = nn.relu(%146);
  %148 = nn.conv2d(%147, %layer3.3.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %149 = nn.batch_norm(%148, %layer3.3.bn2.weight, %layer3.3.bn2.bias, %layer3.3.bn2.running_mean, %layer3.3.bn2.running_var);
  %150 = %149.0;
  %151 = nn.relu(%150);
  %152 = nn.conv2d(%151, %layer3.3.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %153 = nn.batch_norm(%152, %layer3.3.bn3.weight, %layer3.3.bn3.bias, %layer3.3.bn3.running_mean, %layer3.3.bn3.running_var);
  %154 = %153.0;
  %155 = add(%154, %143);
  %156 = nn.relu(%155);
  %157 = nn.conv2d(%156, %layer3.4.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %158 = nn.batch_norm(%157, %layer3.4.bn1.weight, %layer3.4.bn1.bias, %layer3.4.bn1.running_mean, %layer3.4.bn1.running_var);
  %159 = %158.0;
  %160 = nn.relu(%159);
  %161 = nn.conv2d(%160, %layer3.4.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %162 = nn.batch_norm(%161, %layer3.4.bn2.weight, %layer3.4.bn2.bias, %layer3.4.bn2.running_mean, %layer3.4.bn2.running_var);
  %163 = %162.0;
  %164 = nn.relu(%163);
  %165 = nn.conv2d(%164, %layer3.4.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %166 = nn.batch_norm(%165, %layer3.4.bn3.weight, %layer3.4.bn3.bias, %layer3.4.bn3.running_mean, %layer3.4.bn3.running_var);
  %167 = %166.0;
  %168 = add(%167, %156);
  %169 = nn.relu(%168);
  %170 = nn.conv2d(%169, %layer3.5.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %171 = nn.batch_norm(%170, %layer3.5.bn1.weight, %layer3.5.bn1.bias, %layer3.5.bn1.running_mean, %layer3.5.bn1.running_var);
  %172 = %171.0;
  %173 = nn.relu(%172);
  %174 = nn.conv2d(%173, %layer3.5.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %175 = nn.batch_norm(%174, %layer3.5.bn2.weight, %layer3.5.bn2.bias, %layer3.5.bn2.running_mean, %layer3.5.bn2.running_var);
  %176 = %175.0;
  %177 = nn.relu(%176);
  %178 = nn.conv2d(%177, %layer3.5.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %179 = nn.batch_norm(%178, %layer3.5.bn3.weight, %layer3.5.bn3.bias, %layer3.5.bn3.running_mean, %layer3.5.bn3.running_var);
  %180 = %179.0;
  %181 = add(%180, %169);
  %182 = nn.relu(%181);
  %183 = nn.conv2d(%182, %layer4.0.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %184 = nn.batch_norm(%183, %layer4.0.bn1.weight, %layer4.0.bn1.bias, %layer4.0.bn1.running_mean, %layer4.0.bn1.running_var);
  %185 = %184.0;
  %186 = nn.relu(%185);
  %187 = nn.conv2d(%186, %layer4.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %188 = nn.batch_norm(%187, %layer4.0.bn2.weight, %layer4.0.bn2.bias, %layer4.0.bn2.running_mean, %layer4.0.bn2.running_var);
  %189 = %188.0;
  %190 = nn.relu(%189);
  %191 = nn.conv2d(%190, %layer4.0.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %192 = nn.batch_norm(%191, %layer4.0.bn3.weight, %layer4.0.bn3.bias, %layer4.0.bn3.running_mean, %layer4.0.bn3.running_var);
  %193 = nn.conv2d(%182, %layer4.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %194 = nn.batch_norm(%193, %layer4.0.downsample.1.weight, %layer4.0.downsample.1.bias, %layer4.0.downsample.1.running_mean, %layer4.0.downsample.1.running_var);
  %195 = %192.0;
  %196 = %194.0;
  %197 = add(%195, %196);
  %198 = nn.relu(%197);
  %199 = nn.conv2d(%198, %layer4.1.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %200 = nn.batch_norm(%199, %layer4.1.bn1.weight, %layer4.1.bn1.bias, %layer4.1.bn1.running_mean, %layer4.1.bn1.running_var);
  %201 = %200.0;
  %202 = nn.relu(%201);
  %203 = nn.conv2d(%202, %layer4.1.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %204 = nn.batch_norm(%203, %layer4.1.bn2.weight, %layer4.1.bn2.bias, %layer4.1.bn2.running_mean, %layer4.1.bn2.running_var);
  %205 = %204.0;
  %206 = nn.relu(%205);
  %207 = nn.conv2d(%206, %layer4.1.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %208 = nn.batch_norm(%207, %layer4.1.bn3.weight, %layer4.1.bn3.bias, %layer4.1.bn3.running_mean, %layer4.1.bn3.running_var);
  %209 = %208.0;
  %210 = add(%209, %198);
  %211 = nn.relu(%210);
  %212 = nn.conv2d(%211, %layer4.2.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %213 = nn.batch_norm(%212, %layer4.2.bn1.weight, %layer4.2.bn1.bias, %layer4.2.bn1.running_mean, %layer4.2.bn1.running_var);
  %214 = %213.0;
  %215 = nn.relu(%214);
  %216 = nn.conv2d(%215, %layer4.2.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %217 = nn.batch_norm(%216, %layer4.2.bn2.weight, %layer4.2.bn2.bias, %layer4.2.bn2.running_mean, %layer4.2.bn2.running_var);
  %218 = %217.0;
  %219 = nn.relu(%218);
  %220 = nn.conv2d(%219, %layer4.2.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %221 = nn.batch_norm(%220, %layer4.2.bn3.weight, %layer4.2.bn3.bias, %layer4.2.bn3.running_mean, %layer4.2.bn3.running_var);
  %222 = %221.0;
  %223 = add(%222, %211);
  %224 = nn.relu(%223);
  %225 = nn.adaptive_avg_pool2d(%224, output_size=[1, 1]);
  %226 = reshape(%225, newshape=[0, -1, 1, 1]);
  %227 = transpose(%fc.weight, axes=[1, 0]);
  %228 = squeeze(%226, axis=[2, 3]);
  %229 = transpose(%227, axes=[1, 0]);
  %230 = nn.dense(%228, %229, units=1000);
  add(%230, %fc.bias)
}