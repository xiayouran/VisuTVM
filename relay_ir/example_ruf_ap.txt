fn (%input0: Tensor[(1, 16, 64, 64), float32] /* ty=Tensor[(1, 16, 64, 64), float32] */, %conv1.weight: Tensor[(16, 16, 1, 1), float32] /* ty=Tensor[(16, 16, 1, 1), float32] */, %conv2.weight: Tensor[(16, 16, 1, 1), float32] /* ty=Tensor[(16, 16, 1, 1), float32] */, %conv3.weight: Tensor[(16, 16, 1, 1), float32] /* ty=Tensor[(16, 16, 1, 1), float32] */) -> Tensor[(1, 16, 64, 64), float32] {
  %0 = add(%input0, 0.1f /* ty=float32 */) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1 = nn.conv2d(%0, %conv1.weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %2 = add(%1, 0.1f /* ty=float32 */) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %3 = add(%1, %2) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %4 = nn.conv2d(%3, %conv2.weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %5 = nn.conv2d(%3, %conv3.weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  add(%4, %5) /* ty=Tensor[(1, 16, 64, 64), float32] */
} /* ty=fn (Tensor[(1, 16, 64, 64), float32], Tensor[(16, 16, 1, 1), float32], Tensor[(16, 16, 1, 1), float32], Tensor[(16, 16, 1, 1), float32]) -> Tensor[(1, 16, 64, 64), float32] */