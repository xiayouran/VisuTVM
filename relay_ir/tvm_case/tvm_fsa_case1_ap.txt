fn (%x: Tensor[(2, 4, 10, 10), float32] /* ty=Tensor[(2, 4, 10, 10), float32] */, %weight: Tensor[(2, 4, 3, 3), float32] /* ty=Tensor[(2, 4, 3, 3), float32] */, %in_bias: Tensor[(4, 1, 1), float32] /* ty=Tensor[(4, 1, 1), float32] */) -> Tensor[(2, 2, 10, 10), float32] {
  %0 = squeeze(meta[relay.Constant][0] /* ty=Tensor[(4, 1, 1), float32] */, axis=[1, 2]) /* ty=Tensor[(4), float32] */;
  %1 = expand_dims(%0, axis=1, num_newaxis=2) /* ty=Tensor[(4, 1, 1), float32] */;
  %2 = nn.relu(%x) /* ty=Tensor[(2, 4, 10, 10), float32] */;
  %3 = divide(%in_bias, %1) /* ty=Tensor[(4, 1, 1), float32] */;
  %4 = expand_dims(%0, axis=1, num_newaxis=2) /* ty=Tensor[(4, 1, 1), float32] */;
  %5 = add(%2, %3) /* ty=Tensor[(2, 4, 10, 10), float32] */;
  %6 = multiply(%weight, %4) /* ty=Tensor[(2, 4, 3, 3), float32] */;
  nn.conv2d(%5, %6, padding=[1, 1, 1, 1], channels=2, kernel_size=[3, 3]) /* ty=Tensor[(2, 2, 10, 10), float32] */
} /* ty=fn (Tensor[(2, 4, 10, 10), float32], Tensor[(2, 4, 3, 3), float32], Tensor[(4, 1, 1), float32]) -> Tensor[(2, 2, 10, 10), float32] */
