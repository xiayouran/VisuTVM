fn (%x: Tensor[(1, 4, 16, 16), float32] /* ty=Tensor[(1, 4, 16, 16), float32] */, %w1: Tensor[(4, 4, 1, 1), float32] /* ty=Tensor[(4, 4, 1, 1), float32] */, %w2: Tensor[(8, 4, 1, 1), float32] /* ty=Tensor[(8, 4, 1, 1), float32] */, %scale1: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %scale2: Tensor[(1), float32] /* ty=Tensor[(1), float32] */) -> (Tensor[(1, 4, 16, 16), float32], Tensor[(1, 8, 16, 16), float32]) {
  %0 = (%w1, %w2) /* ty=(Tensor[(4, 4, 1, 1), float32], Tensor[(8, 4, 1, 1), float32]) */;
  %1 = concatenate(%0) /* ty=Tensor[(12, 4, 1, 1), float32] */;
  %2 = nn.conv2d(%x, %1, padding=[0, 0, 0, 0], channels=12) /* ty=Tensor[(1, 12, 16, 16), float32] */;
  %3 = strided_slice(%2, begin=[0, 0], end=[-1, 4], strides=[1, 1], slice_mode="size", axes=None) /* ty=Tensor[(1, 4, 16, 16), float32] */;
  %4 = strided_slice(%2, begin=[0, 4], end=[-1, 8], strides=[1, 1], slice_mode="size", axes=None) /* ty=Tensor[(1, 8, 16, 16), float32] */;
  %5 = multiply(%3, %scale1) /* ty=Tensor[(1, 4, 16, 16), float32] */;
  %6 = multiply(%4, %scale2) /* ty=Tensor[(1, 8, 16, 16), float32] */;
  (%5, %6) /* ty=(Tensor[(1, 4, 16, 16), float32], Tensor[(1, 8, 16, 16), float32]) */
} /* ty=fn (Tensor[(1, 4, 16, 16), float32], Tensor[(4, 4, 1, 1), float32], Tensor[(8, 4, 1, 1), float32], Tensor[(1), float32], Tensor[(1), float32]) -> (Tensor[(1, 4, 16, 16), float32], Tensor[(1, 8, 16, 16), float32]) */